{"config":{"lang":["es"],"separator":"[\\s\\-:]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JavaScript - Desarrollo de Aplicaciones Web en Entorno Cliente","text":"<p>\ud83d\udc4b \u00a1Hola! Te doy la bienvenida al curso de JavaScript moderno: el lenguaje fundamental para crear experiencias din\u00e1micas en la web.</p>"},{"location":"#objetivos-del-curso","title":"\ud83c\udfaf Objetivos del curso","text":"<ul> <li>Comprender los fundamentos de JavaScript moderno (ES2023+)</li> <li>Dominar la sintaxis moderna (<code>let</code>/<code>const</code>, funciones flecha, destructuring\u2026)</li> <li>Desarrollar funciones, objetos y estructuras de control con eficacia</li> <li>Aplicar DOM y eventos para manipular p\u00e1ginas web din\u00e1micamente</li> <li>Utilizar APIs web como <code>fetch</code>, <code>localStorage</code>, <code>Geolocation</code>, etc.</li> <li>Escribir c\u00f3digo limpio, modular y mantenible</li> </ul>"},{"location":"#nivel-del-curso","title":"\ud83d\udcda Nivel del curso","text":"<p>Este material est\u00e1 dise\u00f1ado para estudiantes de Desarrollo de Aplicaciones Web, con conocimientos previos en:</p> <ul> <li>HTML5 y CSS3</li> <li>L\u00f3gica de programaci\u00f3n b\u00e1sica</li> <li>Familiaridad con editores de c\u00f3digo (por ejemplo, VS Code)</li> </ul>"},{"location":"#estructura-del-curso","title":"\ud83e\udded Estructura del curso","text":""},{"location":"#1-conceptos-basicos","title":"\ud83d\udfe0 1. Conceptos b\u00e1sicos","text":"<ul> <li>1.0 Introducci\u00f3n a JavaScript</li> <li>1.0.1 Tu primer script en JavaScript</li> <li>1.1 Caracter\u00edsticas de JavaScript</li> <li>1.2 Tu primera aplicaci\u00f3n</li> <li>1.3 JavaScript en HTML</li> <li>1.4 Entradas y salidas en JavaScript</li> <li>1.5 Variables</li> <li>1.6 Operadores</li> <li>1.7 Control de flujo</li> <li>1.7.1 Condicionales</li> <li>1.7.2 Bucles b\u00e1sicos</li> <li>1.7.3 Bucles avanzados</li> <li>1.7.4 Break y continue</li> <li>1.8 Funciones</li> <li>1.8.1 Funciones (I): Fundamentos</li> <li>1.8.2 Funciones (II): Uso avanzado</li> <li>1.8.3 Funciones (III): Par\u00e1metros y cierres</li> <li>\ud83d\udcdd 1.9 Ejercicio Trivial</li> </ul>"},{"location":"#2-uso-de-los-objetos-predefinidos-del-lenguaje-javascript","title":"\ud83d\udfe1 2. Uso de los objetos predefinidos del lenguaje JavaScript","text":"<ul> <li>2.1. Objetos nativos  </li> <li>2.2. Objetos del navegador  </li> <li>2.3. Gesti\u00f3n de temporizadores (<code>setTimeout</code>, <code>setInterval</code>)</li> </ul>"},{"location":"#3-funciones-arrays-y-objetos-definidos-por-el-usuario","title":"\ud83d\udfe2 3. Funciones, arrays y objetos definidos por el usuario","text":"<ul> <li>3.1. Funciones  </li> <li>3.2. Arrays y m\u00e9todos fundamentales  </li> <li>3.3. Objetos definidos por el usuario  </li> <li>3.4. M\u00f3dulos ES (<code>import/export</code>)</li> </ul>"},{"location":"#4-interaccion-con-el-usuario-eventos-y-formularios","title":"\ud83d\udd35 4. Interacci\u00f3n con el usuario, eventos y formularios","text":"<ul> <li>4.1. Eventos (<code>click</code>, <code>input</code>, etc.)  </li> <li>4.2. Validaci\u00f3n de formularios  </li> <li>4.3. Almacenamiento local: <code>WebStorage</code></li> </ul>"},{"location":"#5-uso-del-dom","title":"\ud83d\udfe3 5. Uso del DOM","text":"<ul> <li>5.1. Recorrer elementos del DOM  </li> <li>5.2. Editar elementos del DOM  </li> <li>5.3. Crear elementos del DOM din\u00e1micamente</li> </ul>"},{"location":"#6-trabajo-con-datos-y-apis","title":"\ud83d\udfe4 6. Trabajo con datos y APIs","text":"<ul> <li>6.1. Promesas  </li> <li>6.2. Uso de la API <code>fetch</code></li> </ul>"},{"location":"#requisitos-tecnicos","title":"\ud83d\udee0\ufe0f Requisitos t\u00e9cnicos","text":"<p>Para seguir este curso necesitar\u00e1s:</p> <ul> <li>Navegador moderno (Chrome, Firefox, Edge, Arc, etc.)</li> <li>Editor de c\u00f3digo (VS Code recomendado o forks como Windsurf, Cursor, etc.)</li> <li>Extensi\u00f3n Live Server o similar para ver cambios en tiempo real</li> <li>Conocimientos b\u00e1sicos de terminal</li> </ul>"},{"location":"#como-empezar","title":"\ud83d\ude80 C\u00f3mo empezar","text":"<ol> <li> <p>Crea una carpeta de proyecto: <pre><code>mkdir javascript\ncd javascript\ncode .\n</code></pre></p> </li> <li> <p>Crea los archivos base:</p> <ul> <li><code>index.html</code></li> <li><code>main.js</code></li> <li><code>style.css</code></li> </ul> </li> <li> <p>Instala la extensi\u00f3n Live Server o Five Server en VS Code y abre el archivo <code>index.html</code> en el navegador para ver los cambios en tiempo real.</p> </li> </ol>"},{"location":"#recursos-adicionales","title":"\ud83d\udcda Recursos adicionales","text":"<ul> <li>Documentaci\u00f3n oficial de JavaScript (MDN)</li> <li>JavaScript.info (manual completo)</li> <li>You Don\u2019t Know JS (serie de libros)</li> <li>JavaScript Patterns (por Addy Osmani)</li> <li>Eloquent JavaScript (por Marijn Haverbeke)</li> </ul>"},{"location":"#i-sobre-el-curso","title":"\u2139\ufe0f Sobre el curso","text":"<p>Este material ha sido desarrollado para el m\u00f3dulo de Desarrollo de Aplicaciones Web en Entorno Cliente, con el objetivo de proporcionar una base s\u00f3lida y moderna sobre el lenguaje JavaScript y sus aplicaciones en el navegador.</p> <p>Autora: Laura Folgado Galache</p> Comenzar Curso Ver Ejercicios"},{"location":"01-conceptos-basicos/01-00-01-primer-ejemplo/","title":"1.0.1 Tu primer script en JavaScript","text":"<p>En este ejemplo pr\u00e1ctico, vas a comprobar c\u00f3mo funciona el tipado din\u00e1mico y d\u00e9bil en JavaScript con un peque\u00f1o programa que se ejecuta directamente en el navegador.</p>"},{"location":"01-conceptos-basicos/01-00-01-primer-ejemplo/#estructura-del-proyecto","title":"\ud83d\udcc2 Estructura del proyecto","text":"<pre><code>01-tipado/\n\u251c\u2500\u2500 index.html\n\u2514\u2500\u2500 script.js\n</code></pre>"},{"location":"01-conceptos-basicos/01-00-01-primer-ejemplo/#paso-1-configuracion-inicial","title":"\ud83d\udcdd Paso 1: configuraci\u00f3n inicial","text":"<p>Crea un archivo <code>index.html</code> con el siguiente contenido:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Mi primer script JS&lt;/title&gt;\n  &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Consulta la consola del navegador&lt;/h1&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"01-conceptos-basicos/01-00-01-primer-ejemplo/#paso-2-logica-del-script","title":"\ud83d\udcdd Paso 2: l\u00f3gica del script","text":"<p>Crea un archivo <code>script.js</code> con el siguiente c\u00f3digo:</p> <pre><code>// Tipado din\u00e1mico\nlet x = 42;\nconsole.log(\"Valor de x:\", x);\nconsole.log(\"Tipo de x:\", typeof x);\n\nx = \"ahora soy un texto\";\nconsole.log(\"Nuevo valor de x:\", x);\nconsole.log(\"Nuevo tipo de x:\", typeof x);\n\n// Tipado d\u00e9bil\nlet resultado1 = \"5\" + 3;\nconsole.log('\"5\" + 3 =', resultado1);\n\nlet resultado2 = 5 + \"3\";\nconsole.log(\"5 + '3' =\", resultado2);\n\nlet resultado3 = 5 + 3;\nconsole.log(\"5 + 3 =\", resultado3);\n</code></pre>"},{"location":"01-conceptos-basicos/01-00-01-primer-ejemplo/#conceptos-aprendidos-en-este-ejemplo","title":"\ud83d\udcd8 Conceptos aprendidos en este ejemplo","text":"<p>Tipado din\u00e1mico</p> <p>Una variable puede cambiar de tipo a lo largo del programa.</p> <pre><code>let x = 10;     // n\u00famero\nx = \"hola\";     // ahora string\n</code></pre> <p>Tipado d\u00e9bil</p> <p>JavaScript convierte autom\u00e1ticamente los tipos cuando combina datos distintos.</p> <pre><code>\"5\" + 3 // \u2192 \"53\" (concatenaci\u00f3n)\n5 + 3   // \u2192 8   (suma aritm\u00e9tica)\n</code></pre> <p>Ejecuci\u00f3n en el cliente</p> <p>El c\u00f3digo se ejecuta directamente en el navegador, sin compilaci\u00f3n previa.</p>"},{"location":"01-conceptos-basicos/01-00-01-primer-ejemplo/#ejercicios-para-practicar","title":"\ud83e\uddea Ejercicios para practicar","text":"<ol> <li>Cambia el valor inicial de <code>x</code> a <code>true</code> y observa el tipo que muestra <code>typeof</code>.</li> <li>Prueba con <code>null</code> y <code>undefined</code>. \u00bfQu\u00e9 tipo devuelve cada uno?</li> <li>Modifica la operaci\u00f3n <code>\"5\" + 3</code> por <code>\"5\" * 3</code>. \u00bfQu\u00e9 ocurre?</li> <li>Crea una variable <code>y = \"10\"</code> y s\u00famale un n\u00famero: <code>y + 2</code>. \u00bfQu\u00e9 resultado obtienes?</li> </ol>"},{"location":"01-conceptos-basicos/01-00-01-primer-ejemplo/#solucion-de-problemas","title":"\ud83d\udee0\ufe0f Soluci\u00f3n de problemas","text":"<p>Si algo no funciona:</p> <ol> <li>Aseg\u00farate de que el archivo <code>script.js</code> est\u00e1 en la misma carpeta que <code>index.html</code>.</li> <li>Abre la consola del navegador (F12 \u2192 pesta\u00f1a \"Consola\").</li> <li>Revisa si aparece alg\u00fan error de sintaxis.</li> </ol>"},{"location":"01-conceptos-basicos/01-00-introduccion/","title":"1.1. Caracter\u00edsticas de JavaScript","text":"<p>Esta es la primera lecci\u00f3n del curso de JavaScript moderno, donde vamos a repasar las caracter\u00edsticas esenciales del lenguaje y las mejoras que trajo la versi\u00f3n ES6 respecto a versiones anteriores como ES5.</p>"},{"location":"01-conceptos-basicos/01-00-introduccion/#que-tipo-de-lenguaje-es-javascript","title":"\ud83d\udccc \u00bfQu\u00e9 tipo de lenguaje es JavaScript?","text":"<p>JavaScript es un lenguaje de programaci\u00f3n muy extendido en el desarrollo web, especialmente en el entorno cliente, aunque tambi\u00e9n puede ejecutarse en el servidor gracias a entornos como Node.js.</p>"},{"location":"01-conceptos-basicos/01-00-introduccion/#lenguaje-del-lado-del-cliente-cliente-side","title":"Lenguaje del lado del cliente (cliente-side)","text":"<p>JavaScript se ejecuta, por defecto, en el navegador del usuario, lo que permite crear p\u00e1ginas interactivas sin necesidad de recargar el sitio.</p>"},{"location":"01-conceptos-basicos/01-00-introduccion/#interpretado-aunque","title":"Interpretado (aunque...)","text":"<p>Tradicionalmente se ha dicho que es un lenguaje interpretado, ya que el navegador lo ejecuta directamente sin necesidad de compilar previamente. No obstante, los motores modernos (como V8 de Chrome) compilan JIT (just in time) para mejorar el rendimiento.  </p>"},{"location":"01-conceptos-basicos/01-00-introduccion/#imperativo-y-estructurado","title":"Imperativo y estructurado","text":"<p>JavaScript sigue el paradigma imperativo, lo que significa que describes c\u00f3mo debe hacerse algo paso a paso. Permite escribir c\u00f3digo estructurado con funciones, bloques, condiciones y bucles.</p>"},{"location":"01-conceptos-basicos/01-00-introduccion/#tipado-debil-y-dinamico","title":"Tipado d\u00e9bil y din\u00e1mico","text":"<p>Las variables no declaran su tipo expl\u00edcitamente. Adem\u00e1s, pueden cambiar de tipo en tiempo de ejecuci\u00f3n, lo que hace que JavaScript sea flexible, pero tambi\u00e9n puede provocar errores inesperados si no se tiene cuidado.</p> <pre><code>let x = 5;     // tipo n\u00famero\nx = \"hola\";    // ahora es string\n</code></pre>"},{"location":"01-conceptos-basicos/01-00-introduccion/#basado-en-objetos-y-prototipos","title":"Basado en objetos y prototipos","text":"<p>JavaScript no usa clases tradicionales como en Java o C++, sino que se basa en un sistema de prototipos para la herencia y reutilizaci\u00f3n de c\u00f3digo. Desde ES6, sin embargo, se introdujo una sintaxis de clases, aunque sigue funcionando con prototipos por debajo.</p>"},{"location":"01-conceptos-basicos/01-00-introduccion/#orientado-a-objetos","title":"Orientado a objetos","text":"<p>Puedes crear objetos, asignarles propiedades y m\u00e9todos, y estructurar el c\u00f3digo de forma modular. La orientaci\u00f3n a objetos en JavaScript es menos r\u00edgida que en otros lenguajes y muy flexible.</p>"},{"location":"01-conceptos-basicos/01-00-introduccion/#y-que-es-ecmascript","title":"\ud83d\udccc \u00bfY qu\u00e9 es ECMAScript?","text":"<p>ECMAScript es el est\u00e1ndar que define el lenguaje JavaScript. El organismo encargado de mantenerlo es ECMA International, y se actualiza cada a\u00f1o desde 2015.</p> <p>Las versiones m\u00e1s importantes son:</p> <ul> <li>ES5 (2009): ampli\u00f3 la compatibilidad y estabilidad en navegadores.</li> <li>ES6 (2015): revoluci\u00f3n del lenguaje. Introdujo <code>let</code>, <code>const</code>, funciones flecha, clases, <code>Promise</code>, <code>Map</code>, <code>Set</code>, etc.</li> <li>ES2022\u2013ES2024: siguen a\u00f1adiendo mejoras como <code>top-level await</code>, <code>private fields</code>, <code>Array.prototype.at()</code> y m\u00e1s.</li> </ul> <p>Compatibilidad de versiones</p> <p>Las versiones de JavaScript ES5 y ES6+ son compatibles entre s\u00ed. Pero como dice el refr\u00e1n: \"No mezcles churras con merinas\". Es recomendable usar un estilo coherente y moderno, basado en ES6+.</p>"},{"location":"01-conceptos-basicos/01-00-introduccion/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfD\u00f3nde se ejecuta normalmente JavaScript: en el cliente o en el servidor?</li> <li>Si declaras <code>let x = 5;</code> y despu\u00e9s haces <code>x = \"hola\";</code>, \u00bfqu\u00e9 ocurre con el tipo de la variable?</li> <li>\u00bfQu\u00e9 ventaja tiene la compilaci\u00f3n JIT en los navegadores modernos?</li> <li>\u00bfQu\u00e9 est\u00e1ndar define el lenguaje JavaScript?</li> <li>\u00bfCu\u00e1l es la versi\u00f3n que introdujo <code>let</code>, <code>const</code> y las funciones flecha?</li> </ol>"},{"location":"01-conceptos-basicos/01-01-javascript-en-html/","title":"1.1. D\u00f3nde colocar el c\u00f3digo JavaScript en HTML","text":"<p>Cuando escribimos c\u00f3digo JavaScript en una p\u00e1gina web, tenemos varias formas de incluirlo dentro de nuestro archivo HTML. Veamos las principales opciones y sus ventajas.</p>"},{"location":"01-conceptos-basicos/01-01-javascript-en-html/#opcion-1-javascript-en-el-head","title":"\ud83d\udccc Opci\u00f3n 1: JavaScript en el <code>&lt;head&gt;</code>","text":"<p>Podemos colocar el c\u00f3digo JavaScript en el <code>&lt;head&gt;</code>. Si lo hacemos as\u00ed, es recomendable usar el atributo <code>defer</code> para que el script no bloquee la carga de la p\u00e1gina.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Ejemplo con head&lt;/title&gt;\n  &lt;script src=\"script.js\" defer&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;P\u00e1gina con JS en el head&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u00bfQu\u00e9 hace <code>defer</code>?</p> <p>Con <code>defer</code>, el navegador descarga el script en paralelo mientras carga el HTML, pero lo ejecuta solo cuando el DOM ya est\u00e1 listo.</p>"},{"location":"01-conceptos-basicos/01-01-javascript-en-html/#opcion-2-javascript-en-el-body","title":"\ud83d\udccc Opci\u00f3n 2: JavaScript en el <code>&lt;body&gt;</code>","text":"<p>Otra pr\u00e1ctica com\u00fan es colocar el script justo antes de cerrar la etiqueta <code>&lt;/body&gt;</code>. As\u00ed nos aseguramos de que todo el HTML ya est\u00e1 cargado cuando se ejecute el JavaScript.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Ejemplo con body&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;P\u00e1gina con JS en el body&lt;/h1&gt;\n\n  &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"01-conceptos-basicos/01-01-javascript-en-html/#opcion-3-codigo-embebido-directamente","title":"\ud83d\udccc Opci\u00f3n 3: C\u00f3digo embebido directamente","text":"<p>Tambi\u00e9n podemos escribir el JavaScript directamente en el propio archivo HTML. Esto se usa solo para ejemplos muy sencillos, ya que lo recomendable es mantener el c\u00f3digo en un archivo externo.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Ejemplo con script embebido&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Ejemplo con c\u00f3digo directo&lt;/h1&gt;\n\n  &lt;script&gt;\n    console.log(\"Hola desde un script embebido\");\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Buenas pr\u00e1cticas</p> <p>Hoy en d\u00eda, tanto colocar el script al final del body como en el head con <code>defer</code> son opciones v\u00e1lidas. La opci\u00f3n preferida en proyectos modernos suele ser usar <code>defer</code> en el head, porque mantiene los scripts organizados y asegura que no bloqueen la carga del HTML.</p>"},{"location":"01-conceptos-basicos/01-02-entradas-salidas/","title":"1.2. Entradas y salidas en JavaScript","text":"<p>JavaScript nos ofrece varias formas de interactuar con el usuario y de mostrar informaci\u00f3n. En esta lecci\u00f3n veremos las m\u00e1s b\u00e1sicas y utilizadas.</p>"},{"location":"01-conceptos-basicos/01-02-entradas-salidas/#salidas-en-la-consola-del-navegador","title":"\ud83d\udccc Salidas en la consola del navegador","text":"<p>La consola es una herramienta fundamental para programadores. El m\u00e9todo m\u00e1s com\u00fan es <code>console.log()</code>, pero existen otros:</p> <pre><code>console.log(\"Mensaje normal\");\nconsole.info(\"Mensaje informativo\");\nconsole.warn(\"Mensaje de advertencia\");\nconsole.error(\"Mensaje de error\");\n</code></pre> <ul> <li><code>log</code>: para mensajes generales.</li> <li><code>info</code>: para informaci\u00f3n adicional.</li> <li><code>warn</code>: muestra advertencias resaltadas.</li> <li><code>error</code>: resalta errores en rojo.</li> </ul> <p>C\u00f3mo abrir la consola</p> <p>Puedes abrir la consola con F12 o Ctrl+Shift+I (pesta\u00f1a Consola).</p>"},{"location":"01-conceptos-basicos/01-02-entradas-salidas/#alert","title":"\ud83d\udccc <code>alert()</code>","text":"<p>Muestra un cuadro emergente en el navegador con un mensaje. Se usa solo para pruebas r\u00e1pidas, ya que interrumpe la experiencia del usuario.</p> <pre><code>alert(\"Bienvenido a la p\u00e1gina\");\n</code></pre>"},{"location":"01-conceptos-basicos/01-02-entradas-salidas/#prompt","title":"\ud83d\udccc <code>prompt()</code>","text":"<p>Muestra un cuadro emergente con un campo de texto para que el usuario escriba algo. Devuelve lo que el usuario ha escrito (como cadena).</p> <pre><code>let nombre = prompt(\"\u00bfC\u00f3mo te llamas?\");\nalert(\"Hola, \" + nombre);\n</code></pre>"},{"location":"01-conceptos-basicos/01-02-entradas-salidas/#confirm","title":"\ud83d\udccc <code>confirm()</code>","text":"<p>Muestra un cuadro con Aceptar / Cancelar. Devuelve <code>true</code> si el usuario hace clic en Aceptar y <code>false</code> si hace clic en Cancelar.</p> <pre><code>let seguro = confirm(\"\u00bfQuieres continuar?\");\nconsole.log(\"Resultado:\", seguro);\n</code></pre> <p>Buenas pr\u00e1cticas</p> <ul> <li>Usa <code>console.log</code>, <code>info</code>, <code>warn</code> y <code>error</code> para depurar seg\u00fan la situaci\u00f3n.</li> <li><code>alert</code>, <code>prompt</code> y <code>confirm</code> son \u00fatiles para ejemplos sencillos o pruebas, pero rara vez se utilizan en aplicaciones modernas porque bloquean la p\u00e1gina.</li> </ul>"},{"location":"01-conceptos-basicos/01-02-entradas-salidas/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre <code>console.log</code> y <code>console.error</code>?</li> <li>\u00bfQu\u00e9 devuelve <code>prompt()</code>?</li> <li>\u00bfQu\u00e9 devuelve <code>confirm()</code> si el usuario pulsa Cancelar?</li> <li>Escribe un programa que pregunte tu nombre con <code>prompt</code> y lo muestre en un <code>alert</code>.</li> </ol>"},{"location":"01-conceptos-basicos/01-03-variables/","title":"1.3. Variables en JavaScript","text":"<p>Las variables son la base de cualquier programa. En esta lecci\u00f3n aprender\u00e1s a declararlas, entender su \u00e1mbito y comprender conceptos clave como el hoisting y el uso de <code>\"use strict\"</code>.</p>"},{"location":"01-conceptos-basicos/01-03-variables/#declaracion-de-variables","title":"\ud83d\udccc Declaraci\u00f3n de variables","text":"<p>En JavaScript existen tres formas principales de declarar variables:</p> <pre><code>var nombre = \"Ana\";\nlet edad = 25;\nconst PI = 3.1416;\n</code></pre> <ul> <li><code>var</code>: forma antigua de declarar variables. Tiene \u00e1mbito de funci\u00f3n y permite redeclaraci\u00f3n. Hoy en d\u00eda se desaconseja.</li> <li><code>let</code>: forma moderna, con \u00e1mbito de bloque. Es la opci\u00f3n recomendada para variables que cambian.</li> <li><code>const</code>: igual que <code>let</code>, pero no permite reasignaci\u00f3n. \u00dasala para constantes o referencias que no deban cambiar.</li> </ul>"},{"location":"01-conceptos-basicos/01-03-variables/#ambito-de-las-variables","title":"\ud83d\udccc \u00c1mbito de las variables","text":"<p>El \u00e1mbito determina desde d\u00f3nde puede accederse a una variable:</p> <ul> <li>Global: accesible en todo el programa.</li> <li>Funci\u00f3n: declarada dentro de una funci\u00f3n.</li> <li>Bloque: declarada dentro de llaves <code>{ }</code>, como en un <code>if</code> o un <code>for</code>.</li> </ul> <pre><code>if (true) {\n  let x = 10;   // solo dentro de este bloque\n  var y = 20;   // accesible fuera tambi\u00e9n\n}\nconsole.log(y); // \ud83d\udc49 20\nconsole.log(x); // \u274c Error\n</code></pre>"},{"location":"01-conceptos-basicos/01-03-variables/#hoisting","title":"\ud83d\udccc Hoisting","text":"<p>El hoisting significa que JavaScript eleva las declaraciones al inicio del \u00e1mbito antes de ejecutar el c\u00f3digo.</p> <ul> <li>Con <code>var</code>, la variable se inicializa como <code>undefined</code>:</li> </ul> <pre><code>console.log(a); // \ud83d\udc49 undefined\nvar a = 5;\n</code></pre> <ul> <li>Con <code>let</code> y <code>const</code>, la variable existe pero est\u00e1 en la Zona Muerta Temporal (TDZ) hasta que se declara:</li> </ul> <pre><code>console.log(b); // \u274c ReferenceError\nlet b = 10;\n</code></pre> <p>Recuerda</p> <p>El hoisting no mueve f\u00edsicamente tu c\u00f3digo: simplemente el motor de JavaScript reserva memoria para las declaraciones antes de ejecutar.</p>"},{"location":"01-conceptos-basicos/01-03-variables/#use-strict","title":"\ud83d\udccc <code>\"use strict\"</code>","text":"<p>El modo estricto introduce reglas m\u00e1s seguras en JavaScript:</p> <pre><code>\"use strict\";\nx = 10; // \u274c Error: variable no declarada\n</code></pre> <ul> <li>Evita errores comunes (como usar variables sin declarar).</li> <li>Restringe ciertas acciones inseguras.</li> <li>Desde ES6, los m\u00f3dulos y clases ya usan <code>strict mode</code> por defecto.</li> </ul> <p>Informaci\u00f3n</p> <p>Hoy en d\u00eda no es necesario a\u00f1adir <code>\"use strict\"</code> manualmente en proyectos modernos, pero sigue siendo \u00fatil para entender c\u00f3mo mejor\u00f3 la seguridad del lenguaje a partir de ES5.</p>"},{"location":"01-conceptos-basicos/01-03-variables/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfCu\u00e1l es la diferencia entre <code>let</code> y <code>const</code>?</li> <li>\u00bfQu\u00e9 ocurre si usas <code>var</code> dentro de un bloque como un <code>if</code>?</li> <li>\u00bfPor qu\u00e9 <code>console.log(a)</code> devuelve <code>undefined</code> si <code>a</code> se declar\u00f3 con <code>var</code> m\u00e1s abajo?</li> <li>\u00bfQu\u00e9 significa que una variable est\u00e9 en la Zona Muerta Temporal?</li> </ol>"},{"location":"01-conceptos-basicos/01-04-operadores/","title":"1.4. Operadores en JavaScript","text":"<p>En esta lecci\u00f3n vamos a repasar los principales operadores de JavaScript que permiten trabajar con valores, expresiones y condiciones.  </p>"},{"location":"01-conceptos-basicos/01-04-operadores/#tipos-de-operadores-en-javascript","title":"\ud83d\udccc Tipos de operadores en JavaScript","text":""},{"location":"01-conceptos-basicos/01-04-operadores/#operadores-de-asignacion","title":"Operadores de asignaci\u00f3n","text":"<p>Sirven para dar valor a una variable. El m\u00e1s com\u00fan es <code>=</code>, pero tambi\u00e9n existen operadores compuestos:</p> <pre><code>let x = 10;    // asignaci\u00f3n\nx += 5;        // equivalente a x = x + 5\nx -= 2;        // equivalente a x = x - 2\n````\n\n---\n\n### Operadores aritm\u00e9ticos\n\nPermiten hacer operaciones matem\u00e1ticas:\n\n```js\nlet suma = 5 + 3;      // 8\nlet resta = 10 - 4;    // 6\nlet multi = 6 * 2;     // 12\nlet division = 15 / 3; // 5\nlet resto = 7 % 2;     // 1 (resto de la divisi\u00f3n)\nlet potencia = 2 ** 3; // 8\n</code></pre>"},{"location":"01-conceptos-basicos/01-04-operadores/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<p>Se utilizan para combinar condiciones:</p> <pre><code>let a = true;\nlet b = false;\n\nconsole.log(a &amp;&amp; b); // false (AND)\nconsole.log(a || b); // true  (OR)\nconsole.log(!a);     // false (NOT)\n</code></pre>"},{"location":"01-conceptos-basicos/01-04-operadores/#operadores-de-comparacion","title":"Operadores de comparaci\u00f3n","text":"<p>Sirven para comparar valores:</p> <pre><code>5 == \"5\"   // true  (igualdad con conversi\u00f3n impl\u00edcita)\n5 === \"5\"  // false (igualdad estricta, tambi\u00e9n compara el tipo)\n5 != 4     // true\n5 !== \"5\"  // true\n5 &gt; 3      // true\n5 &lt;= 5     // true\n</code></pre> <p>Conversi\u00f3n impl\u00edcita de tipos</p> <p>En JavaScript, el operador <code>==</code> intenta convertir los valores a un mismo tipo antes de compararlos. Por eso <code>5 == \"5\"</code> devuelve <code>true</code>, porque el string <code>\"5\"</code> se convierte a n\u00famero autom\u00e1ticamente. Esto puede causar resultados inesperados, como: <code>js     0 == false   // true     \"\" == false  // true     null == undefined // true</code> Por este motivo se recomienda usar siempre <code>===</code> y <code>!==</code>, que comparan tanto el valor como el tipo.</p>"},{"location":"01-conceptos-basicos/01-04-operadores/#operador-ternario","title":"Operador ternario","text":"<p>Permite escribir una condici\u00f3n en una sola l\u00ednea:</p> <pre><code>let edad = 18;\nlet mensaje = (edad &gt;= 18) ? \"Eres mayor de edad\" : \"Eres menor de edad\";\nconsole.log(mensaje); // \"Eres mayor de edad\"\n</code></pre> <p>Equivale a escribir:</p> <pre><code>let mensaje;\nif (edad &gt;= 18) {\n  mensaje = \"Eres mayor de edad\";\n} else {\n  mensaje = \"Eres menor de edad\";\n}\n</code></pre>"},{"location":"01-conceptos-basicos/01-04-operadores/#operadores-de-cadena","title":"Operadores de cadena","text":"<p>Se utilizan para trabajar con strings:</p> <pre><code>let nombre = \"Laura\";\nlet saludo = \"Hola \" + nombre;          // concatenaci\u00f3n cl\u00e1sica\nlet saludo2 = `Hola ${nombre}, \u00bfqu\u00e9 tal?`; // plantilla literal con backticks\n</code></pre>"},{"location":"01-conceptos-basicos/01-04-operadores/#plantillas-literales-template-literals","title":"\ud83d\udccc Plantillas literales (template literals)","text":"<p>Las plantillas literales se escriben entre backticks (<code>`</code>) y ofrecen m\u00e1s flexibilidad que las comillas simples o dobles.</p>"},{"location":"01-conceptos-basicos/01-04-operadores/#ventajas-principales","title":"Ventajas principales:","text":"<ol> <li>Interpolaci\u00f3n de variables con <code>${variable}</code>:</li> </ol> <pre><code>let nombre = \"Laura\";\nconsole.log(`Hola ${nombre}`); // Hola Laura\n</code></pre> <ol> <li>Expresiones dentro de <code>${}</code>:</li> </ol> <pre><code>let a = 5, b = 3;\nconsole.log(`La suma es ${a + b}`); // La suma es 8\n</code></pre> <ol> <li>Texto multil\u00ednea sin necesidad de <code>\\n</code>:</li> </ol> <pre><code>let mensaje = `\nL\u00ednea 1\nL\u00ednea 2\nL\u00ednea 3\n`;\nconsole.log(mensaje);\n</code></pre>"},{"location":"01-conceptos-basicos/01-04-operadores/#operadores-rest-y-spread","title":"\ud83d\udccc Operadores rest y spread (<code>...</code>)","text":"<p>El operador <code>...</code> en JavaScript puede funcionar de dos formas diferentes seg\u00fan el contexto:</p>"},{"location":"01-conceptos-basicos/01-04-operadores/#spread-propagacion","title":"Spread (propagaci\u00f3n)","text":"<p>Permite expandir un array o un objeto en sus elementos individuales. Es muy \u00fatil para copiar, combinar o pasar elementos como argumentos de una funci\u00f3n.</p> <pre><code>// Ejemplo con arrays\nconst arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5];\n\nconsole.log(arr2); // [1, 2, 3, 4, 5]\n\n// Ejemplo con objetos\nconst persona = { nombre: \"Laura\", edad: 30 };\nconst copia = { ...persona, profesion: \"Desarrolladora\" };\n\nconsole.log(copia); // { nombre: \"Laura\", edad: 30, profesion: \"Desarrolladora\" }\n</code></pre>"},{"location":"01-conceptos-basicos/01-04-operadores/#rest-agrupacion","title":"Rest (agrupaci\u00f3n)","text":"<p>Permite agrupar m\u00faltiples elementos en un array dentro de funciones o estructuras de datos. Se usa normalmente en la definici\u00f3n de funciones para recibir un n\u00famero indefinido de argumentos.</p> <pre><code>// Ejemplo en funciones\nfunction sumar(...numeros) {\n  return numeros.reduce((a, b) =&gt; a + b, 0);\n}\n\nconsole.log(sumar(1, 2, 3, 4)); // 10\n\n// Ejemplo con destructuring\nconst [primero, ...resto] = [10, 20, 30, 40];\nconsole.log(primero); // 10\nconsole.log(resto);   // [20, 30, 40]\n</code></pre> <p>Recuerda</p> <p>Spread \u2192 \"expande\" elementos.</p> <p>Rest \u2192 \"agrupa\" elementos.</p>"},{"location":"01-conceptos-basicos/01-04-operadores/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 operador devuelve el resto de una divisi\u00f3n?</li> <li>\u00bfPor qu\u00e9 es m\u00e1s seguro usar <code>===</code> en lugar de <code>==</code>?</li> <li>\u00bfA qu\u00e9 equivale el operador ternario en su forma larga con <code>if</code> y <code>else</code>?</li> <li>\u00bfC\u00f3mo escribir\u00edas una plantilla literal que muestre un c\u00e1lculo dentro de <code>${}</code>?</li> <li>\u00bfQu\u00e9 ventaja tienen las plantillas literales frente a la concatenaci\u00f3n cl\u00e1sica con <code>+</code>?</li> </ol>"},{"location":"01-conceptos-basicos/01-05-01-condicionales/","title":"1.5.1. Condicionales en JavaScript","text":"<p>En programaci\u00f3n, los condicionales nos permiten tomar decisiones: ejecutar un bloque de c\u00f3digo u otro en funci\u00f3n de si una condici\u00f3n se cumple.</p>"},{"location":"01-conceptos-basicos/01-05-01-condicionales/#sentencia-if","title":"\ud83d\udccc Sentencia <code>if</code>","text":"<p>La sentencia <code>if</code> eval\u00faa una condici\u00f3n. Si es verdadera (<code>true</code>), se ejecuta el bloque de c\u00f3digo asociado.</p> <pre><code>let edad = 20;\n\nif (edad &gt;= 18) {\n  console.log(\"Eres mayor de edad\");\n}\n</code></pre>"},{"location":"01-conceptos-basicos/01-05-01-condicionales/#ifelse","title":"\ud83d\udccc <code>if...else</code>","text":"<p>Con <code>else</code> podemos ejecutar un bloque alternativo si la condici\u00f3n no se cumple.</p> <pre><code>let edad = 16;\n\nif (edad &gt;= 18) {\n  console.log(\"Eres mayor de edad\");\n} else {\n  console.log(\"Eres menor de edad\");\n}\n</code></pre>"},{"location":"01-conceptos-basicos/01-05-01-condicionales/#ifelse-ifelse","title":"\ud83d\udccc <code>if...else if...else</code>","text":"<p>Sirve para evaluar m\u00faltiples condiciones en orden. El primer bloque que sea verdadero detiene la evaluaci\u00f3n.</p> <pre><code>let nota = 7;\n\nif (nota &gt;= 9) {\n  console.log(\"Sobresaliente\");\n} else if (nota &gt;= 7) {\n  console.log(\"Notable\");\n} else if (nota &gt;= 5) {\n  console.log(\"Aprobado\");\n} else {\n  console.log(\"Suspenso\");\n}\n</code></pre>"},{"location":"01-conceptos-basicos/01-05-01-condicionales/#condiciones-compuestas","title":"\ud83d\udccc Condiciones compuestas","text":"<p>Podemos combinar condiciones con operadores l\u00f3gicos:</p> <ul> <li><code>&amp;&amp;</code> (AND): ambas deben cumplirse</li> <li><code>||</code> (OR): al menos una debe cumplirse</li> <li><code>!</code> (NOT): niega el resultado</li> </ul> <pre><code>let usuario = \"Laura\";\nlet logueado = true;\n\nif (usuario === \"Laura\" &amp;&amp; logueado) {\n  console.log(\"Acceso permitido\");\n}\n</code></pre>"},{"location":"01-conceptos-basicos/01-05-01-condicionales/#sentencia-switch","title":"\ud83d\udccc Sentencia <code>switch</code>","text":"<p>El <code>switch</code> permite comparar un valor con m\u00faltiples casos. Es \u00fatil cuando se eval\u00faa una sola variable con varios posibles valores.</p> <pre><code>let dia = \"martes\";\n\nswitch (dia) {\n  case \"lunes\":\n    console.log(\"Inicio de semana\");\n    break;\n  case \"martes\":\n  case \"mi\u00e9rcoles\":\n  case \"jueves\":\n    console.log(\"Semana en curso\");\n    break;\n  case \"viernes\":\n    console.log(\"\u00a1Viernes!\");\n    break;\n  default:\n    console.log(\"Fin de semana\");\n}\n</code></pre> <p>Consejo</p> <p>Recuerda siempre usar <code>break</code> en cada caso, salvo que quieras que la ejecuci\u00f3n contin\u00fae en el siguiente bloque.</p>"},{"location":"01-conceptos-basicos/01-05-01-condicionales/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 palabra clave se utiliza para evaluar una condici\u00f3n en JavaScript?</li> <li>\u00bfC\u00f3mo escribir\u00edas una condici\u00f3n que muestre <code>\"Bienvenido\"</code> solo si <code>usuario</code> es <code>\"Laura\"</code> y la variable <code>activo</code> es <code>true</code>?</li> <li>\u00bfPara qu\u00e9 sirve la sentencia <code>switch</code>? Pon un ejemplo.</li> <li>\u00bfQu\u00e9 operador l\u00f3gico usar\u00edas para comprobar si alguien tiene m\u00e1s de 18 a\u00f1os o vive en Euskadi?</li> </ol>"},{"location":"01-conceptos-basicos/01-05-02-bucles-basicos/","title":"1.5.2. Bucles b\u00e1sicos en JavaScript","text":"<p>En programaci\u00f3n muchas veces necesitamos repetir tareas. Los bucles permiten ejecutar un bloque de c\u00f3digo varias veces, mientras se cumpla una condici\u00f3n.</p>"},{"location":"01-conceptos-basicos/01-05-02-bucles-basicos/#bucle-for","title":"\ud83d\udccc Bucle <code>for</code>","text":"<p>El bucle <code>for</code> es el m\u00e1s com\u00fan cuando sabemos cu\u00e1ntas veces queremos repetir algo. Su estructura tiene tres partes: inicializaci\u00f3n, condici\u00f3n y actualizaci\u00f3n.</p> <pre><code>for (let i = 1; i &lt;= 5; i++) {\n  console.log(`Iteraci\u00f3n n\u00famero ${i}`);\n}\n</code></pre> <p>En este ejemplo:</p> <ul> <li><code>let i = 1</code>: inicializa la variable de control.</li> <li><code>i &lt;= 5</code>: condici\u00f3n que se eval\u00faa en cada vuelta.</li> <li><code>i++</code>: incrementa la variable en cada iteraci\u00f3n.</li> </ul>"},{"location":"01-conceptos-basicos/01-05-02-bucles-basicos/#bucle-while","title":"\ud83d\udccc Bucle <code>while</code>","text":"<p>El bucle <code>while</code> repite un bloque de c\u00f3digo mientras la condici\u00f3n sea verdadera. Es \u00fatil cuando no sabemos de antemano cu\u00e1ntas iteraciones habr\u00e1.</p> <pre><code>let contador = 0;\n\nwhile (contador &lt; 3) {\n  console.log(`Contador: ${contador}`);\n  contador++;\n}\n</code></pre>"},{"location":"01-conceptos-basicos/01-05-02-bucles-basicos/#bucle-dowhile","title":"\ud83d\udccc Bucle <code>do...while</code>","text":"<p>El bucle <code>do...while</code> es similar al <code>while</code>, pero garantiza que el c\u00f3digo se ejecute al menos una vez, aunque la condici\u00f3n sea falsa desde el principio.</p> <pre><code>let numero = 5;\n\ndo {\n  console.log(`El n\u00famero es ${numero}`);\n  numero++;\n} while (numero &lt; 3);\n</code></pre> <p>En este caso, aunque la condici\u00f3n es falsa desde el inicio, el bloque se ejecuta una vez.</p> <p>Diferencia clave</p> <ul> <li><code>while</code>: primero eval\u00faa la condici\u00f3n y luego ejecuta.</li> <li><code>do...while</code>: ejecuta primero y eval\u00faa despu\u00e9s.</li> </ul>"},{"location":"01-conceptos-basicos/01-05-02-bucles-basicos/#cuando-usar-cada-bucle","title":"\ud83d\udccc \u00bfCu\u00e1ndo usar cada bucle?","text":"<ul> <li>Usa <code>for</code> cuando conoces el n\u00famero de iteraciones.</li> <li>Usa <code>while</code> cuando desconoces cu\u00e1ntas veces se repetir\u00e1, pero depende de una condici\u00f3n.</li> <li>Usa <code>do...while</code> cuando quieras que el bloque se ejecute al menos una vez.</li> </ul>"},{"location":"01-conceptos-basicos/01-05-02-bucles-basicos/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 diferencia principal hay entre <code>while</code> y <code>do...while</code>?</li> <li>Escribe un bucle <code>for</code> que muestre los n\u00fameros del 10 al 1 en orden descendente.</li> <li>\u00bfQu\u00e9 ocurrir\u00eda si olvidas actualizar la variable de control en un bucle <code>while</code>?</li> <li>\u00bfEn qu\u00e9 casos ser\u00eda m\u00e1s adecuado usar <code>for</code> en lugar de <code>while</code>?</li> </ol>"},{"location":"01-conceptos-basicos/01-05-03-bucles-avanzados/","title":"1.5.3. Bucles avanzados con objetos y arrays","text":"<p>Adem\u00e1s de los bucles tradicionales (<code>for</code>, <code>while</code>, <code>do...while</code>), JavaScript ofrece estructuras especiales para trabajar con arrays y objetos. Estos bucles hacen el c\u00f3digo m\u00e1s legible y moderno.</p>"},{"location":"01-conceptos-basicos/01-05-03-bucles-avanzados/#bucle-forin","title":"\ud83d\udccc Bucle <code>for...in</code>","text":"<p>El bucle <code>for...in</code> se utiliza para recorrer las propiedades enumerables de un objeto.</p> <pre><code>const persona = {\n  nombre: \"Laura\",\n  nif: 12345678A,\n  ciudad: \"Zamora\"\n};\n\nfor (let clave in persona) {\n  console.log(`${clave}: ${persona[clave]}`);\n}\n</code></pre> <p>Salida:</p> <pre><code>nombre: Laura\nedad: 12345678A\nciudad: Zamora\n</code></pre> <p>Cuidado con <code>for...in</code></p> <p><code>for...in</code> no est\u00e1 pensado para recorrer arrays, ya que puede incluir propiedades a\u00f1adidas al prototipo.</p>"},{"location":"01-conceptos-basicos/01-05-03-bucles-avanzados/#bucle-forof","title":"\ud83d\udccc Bucle <code>for...of</code>","text":"<p>El bucle <code>for...of</code> se introdujo en ES6 y se usa para recorrer elementos de arrays, strings, Maps, Sets y otros iterables.</p> <pre><code>const frutas = [\"manzana\", \"pera\", \"pl\u00e1tano\"];\n\nfor (let fruta of frutas) {\n  console.log(fruta);\n}\n</code></pre> <p>Salida:</p> <pre><code>manzana\npera\npl\u00e1tano\n</code></pre>"},{"location":"01-conceptos-basicos/01-05-03-bucles-avanzados/#metodos-modernos-para-arrays","title":"\ud83d\udccc M\u00e9todos modernos para arrays","text":"<p>Los arrays en JavaScript tienen m\u00e9todos especiales que reemplazan muchos usos de bucles tradicionales que veremos en lecciones posteriores.</p>"},{"location":"01-conceptos-basicos/01-05-03-bucles-avanzados/#foreach","title":"forEach","text":"<p>Ejecuta una funci\u00f3n para cada elemento.</p> <pre><code>const numeros = [1, 2, 3];\n\nnumeros.forEach(n =&gt; console.log(n * 2));\n// 2, 4, 6\n</code></pre>"},{"location":"01-conceptos-basicos/01-05-03-bucles-avanzados/#map","title":"map","text":"<p>Crea un nuevo array aplicando una funci\u00f3n a cada elemento.</p> <pre><code>const dobles = numeros.map(n =&gt; n * 2);\nconsole.log(dobles); // [2, 4, 6]\n</code></pre>"},{"location":"01-conceptos-basicos/01-05-03-bucles-avanzados/#filter","title":"filter","text":"<p>Crea un nuevo array con los elementos que cumplen una condici\u00f3n.</p> <pre><code>const pares = numeros.filter(n =&gt; n % 2 === 0);\nconsole.log(pares); // [2]\n</code></pre>"},{"location":"01-conceptos-basicos/01-05-03-bucles-avanzados/#reduce","title":"reduce","text":"<p>Reduce los elementos a un \u00fanico valor (por ejemplo, una suma).</p> <pre><code>const suma = numeros.reduce((acum, n) =&gt; acum + n, 0);\nconsole.log(suma); // 6\n</code></pre> <p>Bucles modernos</p> <p>Siempre que trabajes con arrays, considera usar <code>map</code>, <code>filter</code>, <code>reduce</code> o <code>forEach</code>. El c\u00f3digo suele ser m\u00e1s legible y expresivo que con <code>for</code> tradicional.</p>"},{"location":"01-conceptos-basicos/01-05-03-bucles-avanzados/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre <code>for...in</code> y <code>for...of</code>?</li> <li>\u00bfPor qu\u00e9 no es recomendable usar <code>for...in</code> con arrays?</li> <li>Escribe un ejemplo con <code>for...of</code> que recorra un string y muestre cada car\u00e1cter.</li> <li>\u00bfQu\u00e9 m\u00e9todo de arrays usar\u00edas para obtener solo los n\u00fameros mayores que 10 de un array?</li> <li>\u00bfQu\u00e9 devuelve el m\u00e9todo <code>map</code> frente a <code>forEach</code>?</li> </ol>"},{"location":"01-conceptos-basicos/01-05-04-break-continue/","title":"1.5.4 Control de flujo con <code>break</code> y <code>continue</code>","text":"<p>En algunos casos necesitamos alterar el flujo normal de un bucle. Para ello, JavaScript ofrece dos instrucciones clave: <code>break</code> y <code>continue</code>.</p>"},{"location":"01-conceptos-basicos/01-05-04-break-continue/#la-instruccion-break","title":"\ud83d\udccc La instrucci\u00f3n <code>break</code>","text":"<p><code>break</code> se utiliza para salir de un bucle inmediatamente, incluso si la condici\u00f3n a\u00fan no se ha cumplido.  </p> <pre><code>for (let i = 1; i &lt;= 10; i++) {\n  if (i === 5) {\n    console.log(\"\u00a1Se interrumpe el bucle en i = 5!\");\n    break;\n  }\n  console.log(i);\n}\n</code></pre> <p>Salida:</p> <pre><code>1\n2\n3\n4\n\u00a1Se interrumpe el bucle en i = 5!\n</code></pre> <p>En este caso, el bucle se detiene en cuanto <code>i</code> vale 5.</p>"},{"location":"01-conceptos-basicos/01-05-04-break-continue/#la-instruccion-continue","title":"\ud83d\udccc La instrucci\u00f3n <code>continue</code>","text":"<p><code>continue</code> se utiliza para saltar la iteraci\u00f3n actual y pasar directamente a la siguiente.</p> <pre><code>for (let i = 1; i &lt;= 5; i++) {\n  if (i === 3) {\n    console.log(\"Saltamos el n\u00famero 3\");\n    continue;\n  }\n  console.log(i);\n}\n</code></pre> <p>Salida:</p> <pre><code>1\n2\nSaltamos el n\u00famero 3\n4\n5\n</code></pre> <p>En este ejemplo, cuando <code>i</code> es 3, no se ejecuta el <code>console.log(i)</code> y se pasa a la siguiente vuelta.</p>"},{"location":"01-conceptos-basicos/01-05-04-break-continue/#usos-practicos","title":"\ud83d\udccc Usos pr\u00e1cticos","text":"<ul> <li><code>break</code>: \u00fatil cuando buscamos un elemento y podemos detener el bucle al encontrarlo.</li> <li><code>continue</code>: \u00fatil para ignorar casos espec\u00edficos dentro de un bucle.</li> </ul> <pre><code>const numeros = [1, 2, -5, 3, 0, 4];\n\nfor (let n of numeros) {\n  if (n &lt; 0) {\n    console.log(\"N\u00famero negativo encontrado, detenemos el bucle\");\n    break;\n  }\n  if (n === 0) {\n    console.log(\"Ignoramos el 0\");\n    continue;\n  }\n  console.log(`N\u00famero v\u00e1lido: ${n}`);\n}\n</code></pre> <p>Salida:</p> <pre><code>N\u00famero v\u00e1lido: 1\nN\u00famero v\u00e1lido: 2\nN\u00famero negativo encontrado, detenemos el bucle\n</code></pre>"},{"location":"01-conceptos-basicos/01-05-04-break-continue/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 hace la instrucci\u00f3n <code>break</code> en un bucle?</li> <li>\u00bfQu\u00e9 diferencia hay entre <code>continue</code> y <code>break</code>?</li> <li>\u00bfC\u00f3mo escribir\u00edas un bucle <code>for</code> que muestre los n\u00fameros del 1 al 10, pero se detenga en el 7?</li> <li>\u00bfC\u00f3mo escribir\u00edas un bucle <code>for</code> que muestre los n\u00fameros del 1 al 5, pero que salte el 2 y el 4?</li> <li>\u00bfEn qu\u00e9 caso ser\u00eda m\u00e1s recomendable usar <code>continue</code> que un <code>if</code> dentro del bucle?</li> </ol>"},{"location":"01-conceptos-basicos/01-06-ejercicio-trivial/","title":"1.7 Ejercicio Pr\u00e1ctico: Mini-Trivial","text":"<p>Ha llegado el momento de poner en pr\u00e1ctica lo aprendido sobre variables, funciones, arrays, objetos y control de flujo. En este ejercicio crear\u00e1s una versi\u00f3n simplificada del Trivial, donde el objetivo es responder al menos 4 de 6 preguntas para ganar la partida.</p>"},{"location":"01-conceptos-basicos/01-06-ejercicio-trivial/#requisitos-del-ejercicio","title":"\ud83c\udfaf Requisitos del Ejercicio","text":"<ol> <li> <p>Preguntas y categor\u00edas </p> <ul> <li>Dispones de 6 preguntas, una por cada categor\u00eda cl\u00e1sica del Trivial:     Geograf\u00eda, Historia, Arte, Ciencias, Deportes y Espect\u00e1culos.  </li> <li>Cada pregunta debe tener su enunciado, una respuesta correcta y opcionalmente varias respuestas incorrectas.</li> </ul> </li> <li> <p>Mec\u00e1nica del juego </p> <ul> <li>El jugador empieza con 0 puntos.  </li> <li>Se mostrar\u00e1n preguntas hasta que:  <ul> <li>Responda correctamente 4 preguntas (gana).  </li> <li>Responda incorrectamente 3 preguntas (pierde).  </li> <li>O se terminen todas las preguntas.  </li> </ul> </li> <li>Cada vez que el jugador responde, esa pregunta no vuelve a aparecer.  </li> </ul> </li> <li> <p>Estructura del c\u00f3digo </p> <ul> <li>Define las preguntas en un array de objetos.  </li> <li>Crea funciones separadas para las distintas responsabilidades:  <ul> <li>Mostrar una pregunta disponible.  </li> <li>Comprobar si la respuesta es correcta.  </li> <li>Actualizar el marcador de aciertos y errores.  </li> <li>Determinar si la partida termina (ganada o perdida).  </li> </ul> </li> </ul> </li> <li> <p>Restricciones t\u00e9cnicas </p> <ul> <li>Todo el c\u00f3digo debe estar en un archivo <code>script.js</code> independiente (no dentro del HTML).  </li> <li>No es necesario dise\u00f1o avanzado: basta con <code>alert</code>, <code>prompt</code> o <code>console.log</code> para interactuar con el usuario.  </li> </ul> </li> </ol>"},{"location":"01-conceptos-basicos/01-06-ejercicio-trivial/#codigo-inicial-varias-opciones","title":"\ud83e\udde9 C\u00f3digo inicial (varias opciones)","text":""},{"location":"01-conceptos-basicos/01-06-ejercicio-trivial/#opcion-1-variables-individuales","title":"\ud83d\udd39 Opci\u00f3n 1: Variables individuales","text":"<pre><code>let pregunta1 = \"\u00bfCu\u00e1l es la capital de Francia?\";\nlet respuesta1 = \"Par\u00eds\";\n\nlet pregunta2 = \"\u00bfEn qu\u00e9 a\u00f1o comenz\u00f3 la Segunda Guerra Mundial?\";\nlet respuesta2 = \"1939\";\n\n// ... hasta completar 6 preguntas\n</code></pre>"},{"location":"01-conceptos-basicos/01-06-ejercicio-trivial/#opcion-2-array-bidimensional","title":"\ud83d\udd39 Opci\u00f3n 2: Array bidimensional","text":"<pre><code>let preguntas = [\n  [\"Geograf\u00eda\", \"\u00bfCu\u00e1l es la capital de Francia?\", \"Par\u00eds\"],\n  [\"Historia\", \"\u00bfEn qu\u00e9 a\u00f1o comenz\u00f3 la Segunda Guerra Mundial?\", \"1939\"],\n  [\"Arte\", \"\u00bfQui\u00e9n pint\u00f3 La noche estrellada?\", \"Van Gogh\"],\n  [\"Ciencias\", \"\u00bfCu\u00e1l es el planeta m\u00e1s grande del sistema solar?\", \"J\u00fapiter\"],\n  [\"Deportes\", \"\u00bfCu\u00e1ntos jugadores hay en un equipo de f\u00fatbol?\", \"11\"],\n  [\"Espect\u00e1culos\", \"\u00bfQui\u00e9n dirigi\u00f3 la pel\u00edcula Titanic?\", \"James Cameron\"]\n];\n</code></pre>"},{"location":"01-conceptos-basicos/01-06-ejercicio-trivial/#opcion-3-array-de-objetos","title":"\ud83d\udd39 Opci\u00f3n 3: Array de objetos","text":"<pre><code>let preguntas = [\n  { categoria: \"Geograf\u00eda\", enunciado: \"\u00bfCu\u00e1l es la capital de Francia?\", respuesta: \"Par\u00eds\" },\n  { categoria: \"Historia\", enunciado: \"\u00bfEn qu\u00e9 a\u00f1o comenz\u00f3 la Segunda Guerra Mundial?\", respuesta: \"1939\" },\n  { categoria: \"Arte\", enunciado: \"\u00bfQui\u00e9n pint\u00f3 La noche estrellada?\", respuesta: \"Van Gogh\" },\n  { categoria: \"Ciencias\", enunciado: \"\u00bfCu\u00e1l es el planeta m\u00e1s grande del sistema solar?\", respuesta: \"J\u00fapiter\" },\n  { categoria: \"Deportes\", enunciado: \"\u00bfCu\u00e1ntos jugadores hay en un equipo de f\u00fatbol?\", respuesta: \"11\" },\n  { categoria: \"Espect\u00e1culos\", enunciado: \"\u00bfQui\u00e9n dirigi\u00f3 la pel\u00edcula Titanic?\", respuesta: \"James Cameron\" }\n];\n</code></pre>"},{"location":"01-conceptos-basicos/01-06-ejercicio-trivial/#objetivos-de-aprendizaje","title":"\u2705 Objetivos de Aprendizaje","text":"<p>Con este ejercicio practicar\u00e1s:</p> <ul> <li>Declaraci\u00f3n y uso de variables (<code>let</code>, <code>const</code>).</li> <li>Arrays y objetos para almacenar preguntas.</li> <li>Funciones para estructurar el c\u00f3digo.</li> <li>Bucles y control de flujo (<code>for</code>, <code>while</code>, <code>break</code>, <code>continue</code>).</li> <li>Condicionales (<code>if</code>, <code>else if</code>, <code>else</code>).</li> </ul>"},{"location":"01-conceptos-basicos/01-06-ejercicio-trivial/#retos-adicionales-opcional","title":"\ud83d\udcdd Retos adicionales (opcional)","text":"<ol> <li>Permite que las preguntas se seleccionen en un orden aleatorio.</li> <li>Haz que cada pregunta tenga varias opciones de respuesta y que el jugador seleccione la correcta.</li> <li>Muestra un resumen final con las categor\u00edas acertadas y falladas.</li> </ol>"},{"location":"02-objetos-predefinidos/02-01-string/","title":"2.1 Objeto String","text":"<p>El objeto String en JavaScript se utiliza para trabajar con cadenas de texto. Aunque los strings son un tipo primitivo, cuando usas m\u00e9todos sobre ellos el motor crea temporalmente un objeto wrapper para darte acceso a sus propiedades y m\u00e9todos.</p> <p>Inmutabilidad de las cadenas</p> <p>Las cadenas son inmutables: ning\u00fan m\u00e9todo modifica la cadena original. Todos los m\u00e9todos devuelven una nueva cadena.</p>"},{"location":"02-objetos-predefinidos/02-01-string/#creacion-de-cadenas","title":"\ud83d\udccc Creaci\u00f3n de cadenas","text":"<p>Se pueden crear de dos formas aunque se recomienda siempre usar la primera: la forma literal.</p> <pre><code>// Forma literal (recomendada)\nlet texto1 = \"Hola mundo\";\n\n// Constructor: crea un objeto String (\u26a0\ufe0f evita usarlo)\nlet texto2 = new String(\"Hola mundo\");\n</code></pre> <p>No uses <code>new String()</code> para crear cadenas</p> <ul> <li><code>new String(\"hola\")</code> crea un objeto, no una cadena primitiva.</li> <li>Puede romper comparaciones estrictas: <code>\"hola\" === new String(\"hola\")</code> es <code>false</code>.</li> <li><code>typeof \"hola\"</code> es <code>\"string\"</code>, pero <code>typeof new String(\"hola\")</code> es <code>\"object\"</code>. Recomendaci\u00f3n: usa siempre literales con comillas (<code>\"...\"</code>, <code>'...'</code>) o plantillas (<code>`...`</code>).</li> </ul>"},{"location":"02-objetos-predefinidos/02-01-string/#propiedades-principales","title":"\ud83d\udccc Propiedades principales","text":"<pre><code>// .length \u2192 longitud de la cadena (n\u00famero de caracteres)\nlet mensaje = \"JavaScript\";\nconsole.log(mensaje.length); // 10\n</code></pre>"},{"location":"02-objetos-predefinidos/02-01-string/#metodos-mas-utilizados-de-string","title":"\ud83d\udccc M\u00e9todos m\u00e1s utilizados de String","text":""},{"location":"02-objetos-predefinidos/02-01-string/#cambio-de-mayusculas-y-minusculas","title":"Cambio de may\u00fasculas y min\u00fasculas","text":"<pre><code>// .toUpperCase() \u2192 convierte a MAY\u00daSCULAS\nconsole.log(\"hola\".toUpperCase()); // \"HOLA\"\n\n// .toLowerCase() \u2192 convierte a min\u00fasculas\nconsole.log(\"HOLA\".toLowerCase()); // \"hola\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-01-string/#obtener-partes-de-una-cadena","title":"Obtener partes de una cadena","text":"<pre><code>let cadena = \"JavaScript\";\n\n// .substring(inicio, finExclusivo) \u2192 sin \u00edndices negativos\nconsole.log(cadena.substring(0, 4)); // \"Java\"\n\n// .slice(inicio, finExclusivo) \u2192 acepta \u00edndices negativos\nconsole.log(cadena.slice(4));   // \"Script\"\nconsole.log(cadena.slice(-6));  // \"Script\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-01-string/#busqueda-de-texto","title":"B\u00fasqueda de texto","text":"<pre><code>let texto = \"Aprendiendo JavaScript\";\n\n// .indexOf(subcadena) \u2192 \u00edndice de la primera aparici\u00f3n o -1\nconsole.log(texto.indexOf(\"Java\")); // 12\n\n// .includes(subcadena) \u2192 true si contiene\nconsole.log(texto.includes(\"Script\")); // true\n\n// .startsWith(subcadena) \u2192 true si empieza por...\nconsole.log(texto.startsWith(\"Apr\")); // true\n\n// .endsWith(subcadena) \u2192 true si termina con...\nconsole.log(texto.endsWith(\"pt\")); // true\n\n// .charAt(indice) \u2192 caracter en la posici\u00f3n dada\nconsole.log(texto.charAt(12)); // \"J\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-01-string/#reemplazo-de-texto","title":"Reemplazo de texto","text":"<pre><code>let saludo = \"Hola Laura\";\n\n// .replace(buscar, reemplazo) \u2192 reemplaza la primera coincidencia\nconsole.log(saludo.replace(\"Laura\", \"Mundo\")); // \"Hola Mundo\"\n\n// .replaceAll(buscar, reemplazo) \u2192 reemplaza todas (ES2021)\nconsole.log(\"lala\".replaceAll(\"la\", \"na\")); // \"nana\"\n\n// Con expresiones regulares globales (alternativa a replaceAll)\nconsole.log(\"lala\".replace(/la/g, \"na\")); // \"nana\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-01-string/#eliminacion-de-espacios","title":"Eliminaci\u00f3n de espacios","text":"<pre><code>let espacio = \"   Hola   \";\n\n// .trim() \u2192 elimina espacios al inicio y al final\nconsole.log(espacio.trim()); // \"Hola\"\n\n// .trimStart() \u2192 solo al inicio\nconsole.log(espacio.trimStart()); // \"Hola   \"\n\n// .trimEnd() \u2192 solo al final\nconsole.log(espacio.trimEnd()); // \"   Hola\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-01-string/#repeticion-y-division","title":"Repetici\u00f3n y divisi\u00f3n","text":"<pre><code>// .repeat(n) \u2192 repite la cadena n veces\nconsole.log(\"ha\".repeat(3)); // \"hahaha\"\n\n// .split(separador) \u2192 divide y devuelve un array\nconst colores = \"rojo verde azul\".split(\" \"); // [\"rojo\", \"verde\", \"azul\"]\n\n// (Array) .join(separador) \u2192 une un array en una cadena\nconsole.log(colores.join(\" - \")); // \"rojo - verde - azul\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-01-string/#plantillas-literales-template-literals","title":"\ud83d\udccc Plantillas literales (Template literals)","text":"<p>Desde ES6, las comillas invertidas (<code>`</code>) permiten interpolar variables/expresiones y escribir m\u00faltiples l\u00edneas.</p> <pre><code>let nombre = \"Laura\";\nlet edad = 25;\n\n// Interpolaci\u00f3n con ${expresi\u00f3n}\nconsole.log(`Me llamo ${nombre} y el a\u00f1o que viene tendr\u00e9 ${edad + 1} a\u00f1os.`);\n\n// Multil\u00ednea sin caracteres especiales\nlet poema = `Esto es\nuna cadena\nmultil\u00ednea.`;\nconsole.log(poema);\n</code></pre> <p>Cu\u00e1ndo usar plantillas</p> <ul> <li>Cuando necesites interpolaci\u00f3n (<code>${...}</code>).</li> <li>Para cadenas multil\u00ednea sin <code>\\n</code>.</li> <li>Para construir cadenas complejas de forma legible.</li> </ul>"},{"location":"02-objetos-predefinidos/02-01-string/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfPor qu\u00e9 no es recomendable usar <code>new String()</code>?</li> <li>\u00bfQu\u00e9 devuelve la propiedad <code>.length</code>?</li> <li>\u00bfQu\u00e9 diferencias pr\u00e1cticas hay entre <code>slice</code> y <code>substring</code>?</li> <li>Escribe un ejemplo de plantilla literal que incluya una expresi\u00f3n dentro de <code>${}</code>.</li> <li>\u00bfQu\u00e9 m\u00e9todo usar\u00edas para quitar espacios al inicio y al final de una cadena?</li> </ol>"},{"location":"02-objetos-predefinidos/02-02-number/","title":"2.2 Objeto Number","text":"<p>El objeto Number en JavaScript se utiliza para representar y trabajar con valores num\u00e9ricos. JavaScript no distingue entre enteros y decimales: todos los n\u00fameros se representan internamente como n\u00fameros de coma flotante de 64 bits (doble precisi\u00f3n, IEEE 754).</p> <p>Enteros y decimales en JavaScript</p> <p>Aunque escribas <code>10</code> o <code>10.5</code>, ambos se representan con el mismo tipo: number. Esto puede generar resultados inesperados con operaciones de decimales (por ejemplo, <code>0.1 + 0.2 \u2260 0.3</code> exactamente).</p>"},{"location":"02-objetos-predefinidos/02-02-number/#creacion-de-numeros","title":"\ud83d\udccc Creaci\u00f3n de n\u00fameros","text":"<pre><code>// Forma literal (recomendada)\nlet a = 42;\nlet b = 3.14;\n\n// Constructor Number (\u26a0\ufe0f evita usarlo, crea un objeto Number)\nlet c = new Number(42);\n\nconsole.log(typeof a); // \"number\"\nconsole.log(typeof c); // \"object\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-02-number/#propiedades-estaticas-de-number","title":"\ud83d\udccc Propiedades est\u00e1ticas de Number","text":"<pre><code>// N\u00famero m\u00e1ximo representable\nconsole.log(Number.MAX_VALUE);\n\n// N\u00famero m\u00ednimo positivo representable\nconsole.log(Number.MIN_VALUE);\n\n// Valor especial \"no es un n\u00famero\"\nconsole.log(Number.NaN);\n\n// Valores infinitos\nconsole.log(Number.POSITIVE_INFINITY);\nconsole.log(Number.NEGATIVE_INFINITY);\n</code></pre>"},{"location":"02-objetos-predefinidos/02-02-number/#metodos-de-instancia-mas-comunes","title":"\ud83d\udccc M\u00e9todos de instancia m\u00e1s comunes","text":"<p>Estos m\u00e9todos se aplican a valores num\u00e9ricos.</p> <pre><code>let x = 123.456;\n\n// .toFixed(n) \u2192 fija el n\u00famero de decimales\nconsole.log(x.toFixed(2)); // \"123.46\"\n\n// .toPrecision(n) \u2192 total de cifras significativas\nconsole.log(x.toPrecision(4)); // \"123.5\"\n\n// .toString(base) \u2192 convierte a string en otra base (por defecto, base 10)\nconsole.log((255).toString(16)); // \"ff\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-02-number/#metodos-estaticos-de-number","title":"\ud83d\udccc M\u00e9todos est\u00e1ticos de Number","text":"<pre><code>// Number.isInteger(n) \u2192 true si es un entero\nconsole.log(Number.isInteger(42)); // true\nconsole.log(Number.isInteger(3.14)); // false\n\n// Number.isNaN(valor) \u2192 comprueba si es NaN real (mejor que isNaN global)\nconsole.log(Number.isNaN(\"hola\")); // false\nconsole.log(Number.isNaN(NaN));    // true\n\n// Number.isFinite(valor) \u2192 true si es un n\u00famero finito\nconsole.log(Number.isFinite(100));    // true\nconsole.log(Number.isFinite(Infinity)); // false\n\n// Number.parseInt(cadena) \u2192 convierte a entero\nconsole.log(Number.parseInt(\"42px\")); // 42\n\n// Number.parseFloat(cadena) \u2192 convierte a n\u00famero decimal\nconsole.log(Number.parseFloat(\"3.14 metros\")); // 3.14\n</code></pre> <p>Cuidado con parseInt() sin base</p> <p>Si no indicas la base num\u00e9rica (radix), <code>parseInt()</code> puede interpretarlo de forma distinta en navegadores antiguos. Siempre es recomendable usar: <code>js     parseInt(\"1010\", 2); // 10 en base 2</code></p>"},{"location":"02-objetos-predefinidos/02-02-number/#bigint-numeros-muy-grandes","title":"\ud83d\udccc BigInt: n\u00fameros muy grandes","text":"<p>En ES2020 se introdujo BigInt para trabajar con enteros m\u00e1s grandes que <code>Number.MAX_SAFE_INTEGER</code>.</p> <pre><code>// Sintaxis: a\u00f1adir \"n\" al final o usar BigInt()\nlet grande = 9007199254740991n; // Mayor que MAX_SAFE_INTEGER\nlet otro = BigInt(\"123456789012345678901234567890\");\n\nconsole.log(typeof grande); // \"bigint\"\n\n// Operaciones con BigInt (solo entre BigInt)\nconsole.log(grande + 2n);\nconsole.log(otro * 10n);\n</code></pre> <p>BigInt y Number no se mezclan</p> <p>No puedes sumar un <code>Number</code> normal y un <code>BigInt</code> directamente. Debes convertir uno al otro de forma expl\u00edcita.</p>"},{"location":"02-objetos-predefinidos/02-02-number/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre <code>Number</code> como tipo primitivo y <code>new Number()</code> como objeto?</li> <li>\u00bfQu\u00e9 propiedad de <code>Number</code> usar\u00edas para saber el valor m\u00e1s grande representable?</li> <li>\u00bfQu\u00e9 m\u00e9todo convierte un n\u00famero a una cadena en base binaria o hexadecimal?</li> <li>\u00bfQu\u00e9 m\u00e9todo usar\u00edas para comprobar si un valor es realmente <code>NaN</code>?</li> <li>\u00bfQu\u00e9 limitaci\u00f3n tienen los n\u00fameros normales en JavaScript y c\u00f3mo la soluciona <code>BigInt</code>?</li> </ol>"},{"location":"02-objetos-predefinidos/02-03-math/","title":"2.3 Objeto Math","text":"<p>El objeto Math en JavaScript proporciona constantes y funciones matem\u00e1ticas. A diferencia de <code>Number</code>, no se instancia: se accede directamente como <code>Math.funci\u00f3n()</code> o <code>Math.CONSTANTE</code>.</p>"},{"location":"02-objetos-predefinidos/02-03-math/#constantes-y-propiedades-de-math","title":"\ud83d\udccc Constantes y propiedades de Math","text":"<pre><code>// Math.PI \u2192 valor de \u03c0\nconsole.log(Math.PI); // 3.141592653589793\n\n// Math.E \u2192 base del logaritmo natural\nconsole.log(Math.E); // 2.718281828459045\n\n// Math.SQRT2 \u2192 ra\u00edz cuadrada de 2\nconsole.log(Math.SQRT2); // 1.4142135623730951\n\n// Math.LN2 \u2192 logaritmo natural de 2\nconsole.log(Math.LN2); // 0.6931471805599453\n</code></pre> <p>Uso de Math</p> <p>Todas las propiedades y m\u00e9todos de <code>Math</code> son est\u00e1ticos. No puedes hacer <code>new Math()</code>.</p>"},{"location":"02-objetos-predefinidos/02-03-math/#redondeo-y-valores-absolutos","title":"\ud83d\udccc Redondeo y valores absolutos","text":"<pre><code>// Math.round() \u2192 redondea al entero m\u00e1s cercano\nconsole.log(Math.round(4.6)); // 5\nconsole.log(Math.round(4.4)); // 4\n\n// Math.floor() \u2192 redondea hacia abajo\nconsole.log(Math.floor(4.9)); // 4\n\n// Math.ceil() \u2192 redondea hacia arriba\nconsole.log(Math.ceil(4.1)); // 5\n\n// Math.trunc() \u2192 elimina los decimales\nconsole.log(Math.trunc(4.9)); // 4\n\n// Math.abs() \u2192 valor absoluto\nconsole.log(Math.abs(-7)); // 7\n</code></pre>"},{"location":"02-objetos-predefinidos/02-03-math/#maximos-minimos-y-potencias","title":"\ud83d\udccc M\u00e1ximos, m\u00ednimos y potencias","text":"<pre><code>// Math.max() \u2192 devuelve el mayor valor\nconsole.log(Math.max(2, 8, 5)); // 8\n\n// Math.min() \u2192 devuelve el menor valor\nconsole.log(Math.min(2, 8, 5)); // 2\n\n// Math.pow(base, exponente) \u2192 potencia\nconsole.log(Math.pow(2, 3)); // 8\n\n// Equivalente moderno con el operador **\nconsole.log(2 ** 3); // 8\n\n// Math.sqrt(x) \u2192 ra\u00edz cuadrada\nconsole.log(Math.sqrt(16)); // 4\n</code></pre>"},{"location":"02-objetos-predefinidos/02-03-math/#aleatoriedad","title":"\ud83d\udccc Aleatoriedad","text":"<pre><code>// Math.random() \u2192 n\u00famero aleatorio entre 0 y 1 (sin incluir el 1)\nconsole.log(Math.random());\n\n// N\u00famero aleatorio entre 0 y 10\nconsole.log(Math.random() * 10);\n\n// N\u00famero aleatorio entero entre 1 y 6 (como un dado)\nconsole.log(Math.floor(Math.random() * 6) + 1);\n</code></pre> <p>Math.random() no es seguro</p> <p><code>Math.random()</code> no es criptogr\u00e1ficamente seguro. Para seguridad (tokens, contrase\u00f1as) usa la API <code>crypto</code>.</p>"},{"location":"02-objetos-predefinidos/02-03-math/#funciones-trigonometricas","title":"\ud83d\udccc Funciones trigonom\u00e9tricas","text":"<pre><code>// Math.sin(x), Math.cos(x), Math.tan(x) \u2192 \u00e1ngulo en radianes\nconsole.log(Math.sin(Math.PI / 2)); // 1\nconsole.log(Math.cos(0));           // 1\nconsole.log(Math.tan(Math.PI / 4)); // 1\n\n// Inversas: asin, acos, atan\nconsole.log(Math.asin(1)); // 1.5707963267948966 (\u03c0/2)\nconsole.log(Math.acos(1)); // 0\nconsole.log(Math.atan(1)); // 0.7853981633974483 (\u03c0/4)\n</code></pre>"},{"location":"02-objetos-predefinidos/02-03-math/#logaritmos-y-exponenciales","title":"\ud83d\udccc Logaritmos y exponenciales","text":"<pre><code>// Logaritmo natural\nconsole.log(Math.log(Math.E)); // 1\n\n// Logaritmo base 10\nconsole.log(Math.log10(100)); // 2\n\n// Logaritmo base 2\nconsole.log(Math.log2(8)); // 3\n\n// Exponencial (e^x)\nconsole.log(Math.exp(1)); // 2.718281828459045\n</code></pre>"},{"location":"02-objetos-predefinidos/02-03-math/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 constante de <code>Math</code> usar\u00edas para obtener el valor de \u03c0?</li> <li>\u00bfQu\u00e9 diferencia hay entre <code>Math.floor()</code> y <code>Math.trunc()</code>?</li> <li>\u00bfC\u00f3mo generar\u00edas un n\u00famero entero aleatorio entre 1 y 100?</li> <li>\u00bfQu\u00e9 m\u00e9todo devuelve el valor m\u00e1ximo entre un conjunto de n\u00fameros?</li> <li>\u00bfC\u00f3mo calcular\u00edas el logaritmo en base 2 de un n\u00famero en JavaScript?</li> </ol>"},{"location":"02-objetos-predefinidos/02-04-date/","title":"2.4 Objeto Date","text":"<p>El objeto Date en JavaScript permite trabajar con fechas y horas. Se utiliza para obtener la fecha actual, crear fechas espec\u00edficas o manipularlas (sumar d\u00edas, calcular diferencias, etc.).</p> <p>Representaci\u00f3n interna de las fechas</p> <p>Internamente, una fecha en JavaScript se guarda como el n\u00famero de milisegundos desde el 1 de enero de 1970 a las 00:00:00 UTC (Epoch time).</p>"},{"location":"02-objetos-predefinidos/02-04-date/#creacion-de-fechas","title":"\ud83d\udccc Creaci\u00f3n de fechas","text":"<pre><code>// Fecha y hora actuales\nlet ahora = new Date();\nconsole.log(ahora);\n\n// Crear a partir de una fecha en string\nlet navidad = new Date(\"2025-12-25\");\nconsole.log(navidad);\n\n// Crear con valores num\u00e9ricos (a\u00f1o, mes, d\u00eda, hora, minuto, segundo, milisegundo)\n// \u26a0\ufe0f Importante: los meses empiezan en 0 (0 = enero, 11 = diciembre)\nlet ejemplo = new Date(2025, 11, 31, 23, 59, 59);\nconsole.log(ejemplo);\n</code></pre>"},{"location":"02-objetos-predefinidos/02-04-date/#metodos-para-obtener-partes-de-la-fecha","title":"\ud83d\udccc M\u00e9todos para obtener partes de la fecha","text":"<pre><code>let fecha = new Date(\"2025-09-16T10:30:00\");\n\n// D\u00eda del mes\nconsole.log(fecha.getDate()); // 16\n\n// D\u00eda de la semana (0 = domingo, 6 = s\u00e1bado)\nconsole.log(fecha.getDay()); // 2 (martes)\n\n// Mes (0 = enero, 11 = diciembre)\nconsole.log(fecha.getMonth()); // 8 (septiembre)\n\n// A\u00f1o\nconsole.log(fecha.getFullYear()); // 2025\n\n// Horas, minutos y segundos\nconsole.log(fecha.getHours());   // 10\nconsole.log(fecha.getMinutes()); // 30\nconsole.log(fecha.getSeconds()); // 0\n</code></pre> <p>Cuidado con los meses</p> <p><code>getMonth()</code> devuelve valores de 0 a 11. Ejemplo: enero = 0, septiembre = 8, diciembre = 11.</p>"},{"location":"02-objetos-predefinidos/02-04-date/#metodos-para-establecer-valores","title":"\ud83d\udccc M\u00e9todos para establecer valores","text":"<pre><code>let fecha = new Date(\"2025-01-01\");\n\n// Cambiar el a\u00f1o\nfecha.setFullYear(2030);\nconsole.log(fecha);\n\n// Cambiar mes (recuerda: enero = 0)\nfecha.setMonth(6); // julio\nconsole.log(fecha);\n\n// Cambiar d\u00eda\nfecha.setDate(15);\nconsole.log(fecha);\n</code></pre>"},{"location":"02-objetos-predefinidos/02-04-date/#formatos-de-salida","title":"\ud83d\udccc Formatos de salida","text":"<pre><code>let hoy = new Date();\n\n// Formato legible local\nconsole.log(hoy.toLocaleDateString()); // ej. \"16/9/2025\"\n\n// Fecha y hora completas locales\nconsole.log(hoy.toLocaleString()); // ej. \"16/9/2025, 10:45:00\"\n\n// Solo la hora\nconsole.log(hoy.toLocaleTimeString()); // ej. \"10:45:00\"\n\n// ISO 8601 (formato est\u00e1ndar internacional)\nconsole.log(hoy.toISOString()); // \"2025-09-16T08:45:00.000Z\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-04-date/#operaciones-con-fechas","title":"\ud83d\udccc Operaciones con fechas","text":"<pre><code>let inicio = new Date(\"2025-09-01\");\nlet fin = new Date(\"2025-09-16\");\n\n// Diferencia en milisegundos\nlet diferencia = fin - inicio;\nconsole.log(diferencia); // 1296000000\n\n// Convertir a d\u00edas\nlet dias = diferencia / (1000 * 60 * 60 * 24);\nconsole.log(dias); // 15\n</code></pre>"},{"location":"02-objetos-predefinidos/02-04-date/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfC\u00f3mo se representa internamente una fecha en JavaScript?</li> <li>\u00bfQu\u00e9 devuelve <code>getDay()</code> y por qu\u00e9 el resultado puede ser confuso?</li> <li>Si quieres crear el 25 de diciembre de 2025, \u00bfqu\u00e9 valor debes pasar como mes al constructor <code>Date</code>?</li> <li>\u00bfQu\u00e9 m\u00e9todo usar\u00edas para obtener la fecha en formato local de tu pa\u00eds?</li> <li>\u00bfC\u00f3mo calcular\u00edas la diferencia en d\u00edas entre dos fechas?</li> </ol>"},{"location":"02-objetos-predefinidos/02-05-boolean/","title":"2.5 Objeto Boolean","text":"<p>El objeto Boolean en JavaScript representa valores l\u00f3gicos: verdadero (<code>true</code>) o falso (<code>false</code>). Se utiliza en estructuras de control como condicionales (<code>if</code>, <code>while</code>, etc.) y en comparaciones.</p>"},{"location":"02-objetos-predefinidos/02-05-boolean/#creacion-de-valores-booleanos","title":"\ud83d\udccc Creaci\u00f3n de valores booleanos","text":"<pre><code>// Forma literal (recomendada)\nlet esMayor = true;\nlet esMenor = false;\n\n// Constructor Boolean (\u26a0\ufe0f evita usarlo, crea un objeto)\nlet b = new Boolean(true);\n\nconsole.log(typeof esMayor); // \"boolean\"\nconsole.log(typeof b);       // \"object\"\n</code></pre> <p>No uses <code>new Boolean()</code></p> <p>Si usas <code>new Boolean(false)</code>, el resultado es un objeto que siempre se eval\u00faa como <code>true</code> en contextos l\u00f3gicos. Ejemplo: <code>js     if (new Boolean(false)) {     console.log(\"Esto se ejecuta \ud83d\ude31\");     }</code></p>"},{"location":"02-objetos-predefinidos/02-05-boolean/#conversion-a-booleano","title":"\ud83d\udccc Conversi\u00f3n a booleano","text":"<p>Cualquier valor en JavaScript puede convertirse a un booleano.</p> <pre><code>// Boolean() convierte de forma expl\u00edcita\nconsole.log(Boolean(1));       // true\nconsole.log(Boolean(0));       // false\nconsole.log(Boolean(\"hola\"));  // true\nconsole.log(Boolean(\"\"));      // false\n</code></pre>"},{"location":"02-objetos-predefinidos/02-05-boolean/#valores-truthy-y-falsy","title":"Valores truthy y falsy","text":"<ul> <li> <p>Falsy: valores que se convierten a <code>false</code> son <code>false</code>, <code>0</code>, <code>-0</code>, <code>0n</code>, <code>\"\"</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code></p> </li> <li> <p>Truthy: todos los dem\u00e1s valores (incluidos arrays y objetos vac\u00edos).</p> </li> </ul> <pre><code>console.log(Boolean([]));  // true\nconsole.log(Boolean({}));  // true\n</code></pre> <p>Evaluaci\u00f3n de truthy/falsy</p> <p>Este mecanismo es muy usado en condicionales:</p> <pre><code>`   let nombre = \"\";\n    if (nombre) {\n    console.log(\"Hay un nombre\");\n    } else {\n    console.log(\"Cadena vac\u00eda \u2192 se eval\u00faa como false\");\n    }\n    `\n</code></pre>"},{"location":"02-objetos-predefinidos/02-05-boolean/#operadores-logicos-principales","title":"\ud83d\udccc Operadores l\u00f3gicos principales","text":"<pre><code>// AND l\u00f3gico (&amp;&amp;) \u2192 true si ambos son verdaderos\nconsole.log(true &amp;&amp; false); // false\n\n// OR l\u00f3gico (||) \u2192 true si al menos uno es verdadero\nconsole.log(true || false); // true\n\n// NOT l\u00f3gico (!) \u2192 invierte el valor\nconsole.log(!true); // false\n</code></pre>"},{"location":"02-objetos-predefinidos/02-05-boolean/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre <code>true</code> y <code>new Boolean(true)</code>?</li> <li>Escribe dos ejemplos de valores falsy.</li> <li>\u00bfQu\u00e9 valor devuelve <code>Boolean(\" \")</code> (una cadena con un espacio)?</li> <li>\u00bfC\u00f3mo funciona el operador <code>&amp;&amp;</code> (AND l\u00f3gico)?</li> <li>\u00bfQu\u00e9 ocurre si eval\u00faas un array vac\u00edo (<code>[]</code>) en un <code>if</code>?</li> </ol>"},{"location":"02-objetos-predefinidos/02-06-set/","title":"2.7 Set: Conjuntos de valores \u00fanicos","text":"<p>El objeto <code>Set</code> permite almacenar valores \u00fanicos (sin duplicados) y mantener el orden de inserci\u00f3n. Es ideal para eliminar duplicados o comprobar pertenencia de forma eficiente.</p> <p>Valores \u00fanicos y comparaci\u00f3n</p> <p><code>Set</code> considera dos valores iguales siguiendo la sem\u00e1ntica SameValueZero: <code>NaN</code> se considera igual a <code>NaN</code>, y <code>+0</code> y <code>-0</code> se consideran el mismo valor.</p>"},{"location":"02-objetos-predefinidos/02-06-set/#que-es-un-set","title":"\ud83d\udccc \u00bfQu\u00e9 es un <code>Set</code>?","text":"<p>Un <code>Set</code> es una colecci\u00f3n de elementos sin \u00edndices y sin claves, donde cada valor aparece como mucho una vez. Se recorre en el orden en el que se insertaron los elementos.</p>"},{"location":"02-objetos-predefinidos/02-06-set/#crear-un-set","title":"\ud83d\udccc Crear un <code>Set</code>","text":""},{"location":"02-objetos-predefinidos/02-06-set/#literal-y-desde-arrays","title":"Literal y desde arrays","text":"<pre><code>// Set vac\u00edo\nconst s1 = new Set();\n\n// Desde un array (los duplicados se eliminan)\nconst s2 = new Set([1, 2, 2, 3, 3, 4]); // Set {1, 2, 3, 4}\n</code></pre>"},{"location":"02-objetos-predefinidos/02-06-set/#eliminar-duplicados-rapidamente","title":"Eliminar duplicados r\u00e1pidamente","text":"<pre><code>const numeros = [1, 2, 2, 3, 4, 4, 5];\nconst unicos = [...new Set(numeros)]; // [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"02-objetos-predefinidos/02-06-set/#metodos-principales","title":"\ud83d\udccc M\u00e9todos principales","text":""},{"location":"02-objetos-predefinidos/02-06-set/#anadir-y-comprobar","title":"A\u00f1adir y comprobar","text":"<pre><code>const letras = new Set();\nletras.add(\"a\");        // a\u00f1ade \"a\"\nletras.add(\"b\");        // a\u00f1ade \"b\"\nletras.add(\"a\");        // duplicado: no tiene efecto\n\nletras.has(\"a\");        // true\nletras.has(\"z\");        // false\n</code></pre>"},{"location":"02-objetos-predefinidos/02-06-set/#eliminar-elementos","title":"Eliminar elementos","text":"<pre><code>letras.delete(\"b\");     // elimina \"b\" si existe\nletras.delete(\"x\");     // false si no exist\u00eda\n</code></pre>"},{"location":"02-objetos-predefinidos/02-06-set/#tamano-y-limpieza","title":"Tama\u00f1o y limpieza","text":"<pre><code>letras.size;            // n\u00famero de elementos del Set\nletras.clear();         // elimina todos los elementos\n</code></pre>"},{"location":"02-objetos-predefinidos/02-06-set/#recorrer-un-set","title":"\ud83d\udccc Recorrer un <code>Set</code>","text":""},{"location":"02-objetos-predefinidos/02-06-set/#con-forof-y-foreach","title":"Con <code>for...of</code> y <code>forEach</code>","text":"<pre><code>const colores = new Set([\"rojo\", \"verde\", \"azul\"]);\n\nfor (const color of colores) {\n  console.log(color);\n}\n\ncolores.forEach(c =&gt; console.log(c));\n</code></pre>"},{"location":"02-objetos-predefinidos/02-06-set/#convertir-entre-set-y-array","title":"\ud83d\udccc Convertir entre <code>Set</code> y <code>Array</code>","text":""},{"location":"02-objetos-predefinidos/02-06-set/#de-array-a-set-y-vuelta","title":"De <code>Array</code> a <code>Set</code> y vuelta","text":"<pre><code>const arr = [\"a\", \"b\", \"b\", \"c\"];\nconst set = new Set(arr);      // Set {\"a\",\"b\",\"c\"}\nconst backToArray = [...set];  // [\"a\",\"b\",\"c\"]\n</code></pre>"},{"location":"02-objetos-predefinidos/02-06-set/#operaciones-tipicas-de-conjuntos","title":"\ud83d\udccc Operaciones t\u00edpicas de conjuntos","text":"<p>Aunque <code>Set</code> no trae m\u00e9todos nativos para uni\u00f3n/intersecci\u00f3n/diferencia, se pueden construir f\u00e1cilmente.</p>"},{"location":"02-objetos-predefinidos/02-06-set/#union","title":"Uni\u00f3n","text":"<pre><code>const A = new Set([1, 2, 3]);\nconst B = new Set([3, 4, 5]);\nconst union = new Set([...A, ...B]);          // Set {1,2,3,4,5}\n</code></pre>"},{"location":"02-objetos-predefinidos/02-06-set/#interseccion","title":"Intersecci\u00f3n","text":"<pre><code>const interseccion = new Set([...A].filter(x =&gt; B.has(x))); // Set {3}\n</code></pre>"},{"location":"02-objetos-predefinidos/02-06-set/#diferencia","title":"Diferencia","text":"<pre><code>const diferencia = new Set([...A].filter(x =&gt; !B.has(x)));  // Set {1,2}\n</code></pre>"},{"location":"02-objetos-predefinidos/02-06-set/#casos-de-uso-frecuentes","title":"\ud83d\udccc Casos de uso frecuentes","text":""},{"location":"02-objetos-predefinidos/02-06-set/#quitar-duplicados-de-una-lista","title":"Quitar duplicados de una lista","text":"<pre><code>const emails = [\"a@x.com\", \"b@x.com\", \"a@x.com\"];\nconst unicos = [...new Set(emails)]; // [\"a@x.com\",\"b@x.com\"]\n</code></pre>"},{"location":"02-objetos-predefinidos/02-06-set/#comprobacion-rapida-de-pertenencia","title":"Comprobaci\u00f3n r\u00e1pida de pertenencia","text":"<pre><code>const palabrasProhibidas = new Set([\"spam\", \"fake\", \"scam\"]);\npalabrasProhibidas.has(\"spam\"); // true\n</code></pre>"},{"location":"02-objetos-predefinidos/02-06-set/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <pre><code>1. \u00bfQu\u00e9 ocurre al llamar a `add` con un valor que ya existe en el `Set`?\n2. \u00bfQu\u00e9 devuelve la propiedad `.size` de un `Set`?\n3. \u00bfC\u00f3mo convertir\u00edas un `Set` en un array?\n4. \u00bfC\u00f3mo construir\u00edas la **intersecci\u00f3n** de dos `Set` `A` y `B`?\n5. \u00bfPor qu\u00e9 `NaN` s\u00ed se considera igual a `NaN` dentro de un `Set`?\n</code></pre>"},{"location":"02-objetos-predefinidos/02-07-map/","title":"2.8 Map: Colecciones clave\u2013valor","text":"<p>El objeto <code>Map</code> permite almacenar pares clave\u2013valor, donde las claves pueden ser de cualquier tipo (objetos, funciones, arrays, valores primitivos). A diferencia de los objetos normales (<code>{}</code>), un <code>Map</code> mantiene el orden de inserci\u00f3n y ofrece m\u00e9todos espec\u00edficos para su gesti\u00f3n.</p> <p>\u00bfPor qu\u00e9 usar <code>Map</code> en lugar de objetos literales?</p> <ul> <li>En un objeto literal, las claves siempre se convierten a cadenas.</li> <li>En un <code>Map</code>, las claves pueden ser cualquier valor, incluso objetos o funciones.</li> <li>Adem\u00e1s, <code>Map</code> ofrece el m\u00e9todo <code>.size</code> y una API m\u00e1s clara para trabajar con colecciones din\u00e1micas.</li> </ul>"},{"location":"02-objetos-predefinidos/02-07-map/#crear-un-map","title":"\ud83d\udccc Crear un <code>Map</code>","text":""},{"location":"02-objetos-predefinidos/02-07-map/#map-vacio-y-con-valores-iniciales","title":"Map vac\u00edo y con valores iniciales","text":"<pre><code>// Map vac\u00edo\nconst m1 = new Map();\n\n// Map con pares clave\u2013valor iniciales\nconst m2 = new Map([\n  [\"nombre\", \"Laura\"],\n  [\"edad\", 30],\n  [true, \"activo\"]\n]);\n</code></pre>"},{"location":"02-objetos-predefinidos/02-07-map/#usando-objetos-o-funciones-como-clave","title":"Usando objetos o funciones como clave","text":"<pre><code>const claveObjeto = { id: 1 };\nconst claveFuncion = function() {};\n\nconst m3 = new Map();\nm3.set(claveObjeto, \"soy un objeto\");\nm3.set(claveFuncion, \"soy una funci\u00f3n\");\n</code></pre>"},{"location":"02-objetos-predefinidos/02-07-map/#metodos-principales","title":"\ud83d\udccc M\u00e9todos principales","text":""},{"location":"02-objetos-predefinidos/02-07-map/#anadir-y-obtener","title":"A\u00f1adir y obtener","text":"<pre><code>const persona = new Map();\n\npersona.set(\"nombre\", \"Laura\");\npersona.set(\"edad\", 28);\n\nconsole.log(persona.get(\"nombre\")); // \"Laura\"\nconsole.log(persona.get(\"edad\"));   // 28\n</code></pre>"},{"location":"02-objetos-predefinidos/02-07-map/#comprobar-y-eliminar","title":"Comprobar y eliminar","text":"<pre><code>persona.has(\"nombre\");   // true\npersona.delete(\"edad\");  // elimina la clave \"edad\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-07-map/#tamano-y-limpieza","title":"Tama\u00f1o y limpieza","text":"<pre><code>persona.size;    // n\u00famero de elementos\npersona.clear(); // elimina todo el contenido\n</code></pre>"},{"location":"02-objetos-predefinidos/02-07-map/#recorrer-un-map","title":"\ud83d\udccc Recorrer un <code>Map</code>","text":""},{"location":"02-objetos-predefinidos/02-07-map/#con-forof","title":"Con <code>for...of</code>","text":"<pre><code>const usuario = new Map([\n  [\"nombre\", \"Laura\"],\n  [\"rol\", \"admin\"],\n  [\"activo\", true]\n]);\n\nfor (const [clave, valor] of usuario) {\n  console.log(clave, valor);\n}\n</code></pre>"},{"location":"02-objetos-predefinidos/02-07-map/#con-foreach","title":"Con <code>forEach</code>","text":"<pre><code>usuario.forEach((valor, clave) =&gt; {\n  console.log(`${clave}: ${valor}`);\n});\n</code></pre>"},{"location":"02-objetos-predefinidos/02-07-map/#obtener-listas-de-claves-valores-y-entradas","title":"Obtener listas de claves, valores y entradas","text":"<pre><code>[...usuario.keys()];   // [\"nombre\", \"rol\", \"activo\"]\n[...usuario.values()]; // [\"Laura\", \"admin\", true]\n[...usuario.entries()];// [[\"nombre\",\"Laura\"],[\"rol\",\"admin\"],[\"activo\",true]]\n</code></pre>"},{"location":"02-objetos-predefinidos/02-07-map/#diferencias-clave-entre-map-y-objetos-literales","title":"\ud83d\udccc Diferencias clave entre <code>Map</code> y objetos literales","text":"<ul> <li>Mantiene el orden de inserci\u00f3n.</li> <li>Las claves pueden ser cualquier tipo de dato.</li> <li>Proporciona la propiedad <code>.size</code> en lugar de <code>Object.keys(obj).length</code>.</li> <li>Iterar sobre un <code>Map</code> es m\u00e1s directo y claro.</li> </ul>"},{"location":"02-objetos-predefinidos/02-07-map/#casos-de-uso-frecuentes","title":"\ud83d\udccc Casos de uso frecuentes","text":""},{"location":"02-objetos-predefinidos/02-07-map/#contador-de-elementos","title":"Contador de elementos","text":"<pre><code>const palabras = [\"uno\", \"dos\", \"uno\", \"tres\", \"dos\", \"uno\"];\nconst contador = new Map();\n\nfor (const palabra of palabras) {\n  contador.set(palabra, (contador.get(palabra) || 0) + 1);\n}\n\nconsole.log(contador); // Map { \"uno\" =&gt; 3, \"dos\" =&gt; 2, \"tres\" =&gt; 1 }\n</code></pre>"},{"location":"02-objetos-predefinidos/02-07-map/#asociar-objetos-sin-modificar-su-estructura","title":"Asociar objetos sin modificar su estructura","text":"<pre><code>const usuario1 = { id: 1 };\nconst usuario2 = { id: 2 };\n\nconst roles = new Map();\nroles.set(usuario1, \"admin\");\nroles.set(usuario2, \"editor\");\n\nconsole.log(roles.get(usuario1)); // \"admin\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-07-map/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre usar un objeto literal y un <code>Map</code>?</li> <li>\u00bfQu\u00e9 devuelve el m\u00e9todo <code>.get(clave)</code> cuando la clave no existe?</li> <li>\u00bfC\u00f3mo convertir\u00edas un <code>Map</code> en un array de pares clave\u2013valor?</li> <li>\u00bfQu\u00e9 m\u00e9todo utilizar\u00edas para borrar una entrada de un <code>Map</code>?</li> <li>\u00bfQu\u00e9 tipo de valores se pueden usar como clave en un <code>Map</code>?</li> </ol>"},{"location":"02-objetos-predefinidos/02-08-symbol/","title":"2.9 Symbol: Identificadores \u00fanicos","text":"<p>El tipo de dato <code>Symbol</code> fue introducido en ES6 y sirve para crear identificadores \u00fanicos e inmutables. Se utiliza principalmente para evitar colisiones de nombres en propiedades de objetos y para definir claves privadas o semiprivadas.</p> <p>Dato importante</p> <p>Cada vez que llamas a <code>Symbol()</code>, se genera un valor nuevo y \u00fanico, aunque uses la misma descripci\u00f3n.</p>"},{"location":"02-objetos-predefinidos/02-08-symbol/#crear-un-symbol","title":"\ud83d\udccc Crear un <code>Symbol</code>","text":""},{"location":"02-objetos-predefinidos/02-08-symbol/#con-descripcion-opcional","title":"Con descripci\u00f3n opcional","text":"<pre><code>// Crear dos s\u00edmbolos diferentes aunque tengan la misma descripci\u00f3n\nconst s1 = Symbol(\"id\");\nconst s2 = Symbol(\"id\");\n\nconsole.log(s1 === s2); // false\n</code></pre> <p>La descripci\u00f3n (<code>\"id\"</code>) es solo un texto \u00fatil para depuraci\u00f3n, no afecta a la identidad del s\u00edmbolo.</p>"},{"location":"02-objetos-predefinidos/02-08-symbol/#usar-symbol-como-clave-en-objetos","title":"\ud83d\udccc Usar <code>Symbol</code> como clave en objetos","text":"<pre><code>const ID = Symbol(\"id\");\n\nconst usuario = {\n  nombre: \"Laura\",\n  [ID]: 12345\n};\n\nconsole.log(usuario.nombre); // \"Laura\"\nconsole.log(usuario[ID]);    // 12345\n</code></pre> <p>\u26a0\ufe0f Las propiedades definidas con <code>Symbol</code> no aparecen en bucles normales como <code>for...in</code> o <code>Object.keys()</code>.</p>"},{"location":"02-objetos-predefinidos/02-08-symbol/#recuperar-propiedades-symbol","title":"\ud83d\udccc Recuperar propiedades <code>Symbol</code>","text":"<p>Aunque no aparecen en listados normales, puedes acceder a ellas con m\u00e9todos especiales:</p> <pre><code>const simbolos = Object.getOwnPropertySymbols(usuario);\nconsole.log(simbolos); // [ Symbol(id) ]\n</code></pre>"},{"location":"02-objetos-predefinidos/02-08-symbol/#symbol-global-symbolfor","title":"\ud83d\udccc Symbol global (<code>Symbol.for</code>)","text":"<p>Si necesitas reutilizar un s\u00edmbolo, puedes guardarlo en el registro global con <code>Symbol.for</code>.</p> <pre><code>const global1 = Symbol.for(\"claveGlobal\");\nconst global2 = Symbol.for(\"claveGlobal\");\n\nconsole.log(global1 === global2); // true\n</code></pre> <p>Con <code>Symbol.keyFor()</code> puedes recuperar la clave de un s\u00edmbolo global:</p> <pre><code>console.log(Symbol.keyFor(global1)); // \"claveGlobal\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-08-symbol/#symbol-y-las-apis-de-javascript","title":"\ud83d\udccc Symbol y las APIs de JavaScript","text":"<p>Existen s\u00edmbolos bien conocidos que el lenguaje usa internamente, como:</p> <ul> <li><code>Symbol.iterator</code>: define c\u00f3mo se itera sobre un objeto.</li> <li><code>Symbol.toPrimitive</code>: personaliza c\u00f3mo se convierte un objeto a primitivo.</li> <li><code>Symbol.toStringTag</code>: cambia la etiqueta de <code>Object.prototype.toString</code>.</li> </ul> <p>Ejemplo con <code>Symbol.iterator</code>:</p> <pre><code>const numeros = [1, 2, 3];\nconst iterador = numeros[Symbol.iterator]();\n\nconsole.log(iterador.next()); // { value: 1, done: false }\nconsole.log(iterador.next()); // { value: 2, done: false }\n</code></pre>"},{"location":"02-objetos-predefinidos/02-08-symbol/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 devuelve <code>Symbol(\"x\") === Symbol(\"x\")</code>?</li> <li>\u00bfQu\u00e9 ventaja tiene usar <code>Symbol</code> como clave en un objeto frente a una cadena?</li> <li>\u00bfC\u00f3mo acceder\u00edas a las propiedades <code>Symbol</code> de un objeto?</li> <li>\u00bfQu\u00e9 diferencia hay entre <code>Symbol(\"id\")</code> y <code>Symbol.for(\"id\")</code>?</li> <li>\u00bfPara qu\u00e9 sirve <code>Symbol.iterator</code> en JavaScript?</li> </ol>"},{"location":"02-objetos-predefinidos/02-09-window/","title":"3.1 Window: El objeto global del navegador","text":"<p>El objeto <code>window</code> representa la ventana del navegador en la que se carga la p\u00e1gina. Es el objeto global en JavaScript del lado del cliente, lo que significa que pr\u00e1cticamente todo lo que usamos en el navegador \"cuelga\" de <code>window</code>.</p>"},{"location":"02-objetos-predefinidos/02-09-window/#acceso-al-objeto-window","title":"\ud83d\udccc Acceso al objeto <code>window</code>","text":"<p>No es necesario escribir <code>window.</code> siempre, ya que sus propiedades y m\u00e9todos est\u00e1n disponibles de forma global.</p> <pre><code>// Estas dos l\u00edneas son equivalentes\nwindow.alert(\"Hola\");\nalert(\"Hola\");\n</code></pre>"},{"location":"02-objetos-predefinidos/02-09-window/#propiedades-principales-de-window","title":"\ud83d\udccc Propiedades principales de <code>window</code>","text":""},{"location":"02-objetos-predefinidos/02-09-window/#dimensiones-de-la-ventana","title":"Dimensiones de la ventana","text":"<pre><code>console.log(window.innerWidth);   // Anchura de la ventana en p\u00edxeles\nconsole.log(window.innerHeight);  // Altura de la ventana en p\u00edxeles\n</code></pre>"},{"location":"02-objetos-predefinidos/02-09-window/#acceso-al-documento-cargado","title":"Acceso al documento cargado","text":"<pre><code>console.log(window.document.title); // T\u00edtulo de la p\u00e1gina\n</code></pre>"},{"location":"02-objetos-predefinidos/02-09-window/#informacion-de-la-url-actual","title":"Informaci\u00f3n de la URL actual","text":"<pre><code>console.log(window.location.href); // URL completa\nconsole.log(window.location.hostname); // Dominio (ej. www.ejemplo.com)\n</code></pre>"},{"location":"02-objetos-predefinidos/02-09-window/#control-de-la-ventana","title":"\ud83d\udccc Control de la ventana","text":"<p>El objeto <code>window</code> tambi\u00e9n permite abrir, cerrar y mover ventanas. Sin embargo, muchas funciones est\u00e1n limitadas por seguridad en navegadores modernos.</p> <pre><code>// Abre una nueva ventana o pesta\u00f1a\nlet nuevaVentana = window.open(\"https://developer.mozilla.org\", \"_blank\");\n\n// Cierra la ventana abierta\nnuevaVentana.close();\n</code></pre> <p>Cuidado</p> <p>Por motivos de seguridad, la mayor\u00eda de navegadores bloquean ventanas emergentes si no se abren como respuesta a una acci\u00f3n del usuario (por ejemplo, un clic).</p>"},{"location":"02-objetos-predefinidos/02-09-window/#objetos-relacionados","title":"\ud83d\udccc Objetos relacionados","text":"<p>El objeto <code>window</code> contiene otros objetos importantes que estudiaremos en las pr\u00f3ximas lecciones:</p> <ul> <li><code>navigator</code>: informaci\u00f3n del navegador y sistema.</li> <li><code>screen</code>: informaci\u00f3n de la pantalla.</li> <li><code>history</code>: historial de navegaci\u00f3n.</li> <li><code>location</code>: URL actual y navegaci\u00f3n.</li> </ul>"},{"location":"02-objetos-predefinidos/02-09-window/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 representa el objeto <code>window</code> en el navegador?</li> <li>\u00bfPor qu\u00e9 normalmente no hace falta escribir <code>window.</code> delante de m\u00e9todos como <code>alert</code> o <code>document</code>?</li> <li>\u00bfQu\u00e9 informaci\u00f3n proporcionan <code>innerWidth</code> e <code>innerHeight</code>?</li> <li>\u00bfQu\u00e9 limitaciones tienen los m\u00e9todos <code>window.open</code> y <code>window.close</code> en los navegadores modernos?</li> <li>\u00bfQu\u00e9 objetos importantes forman parte de <code>window</code> y se estudiar\u00e1n en las siguientes lecciones?</li> </ol>"},{"location":"02-objetos-predefinidos/02-10-document/","title":"3.2 Document","text":"<p>El objeto <code>document</code> forma parte del objeto <code>window</code> y representa la p\u00e1gina web cargada en el navegador. A trav\u00e9s de \u00e9l podemos leer y modificar el contenido, la estructura y los estilos del HTML. Es la puerta de entrada al DOM (Document Object Model).</p>"},{"location":"02-objetos-predefinidos/02-10-document/#acceso-al-objeto-document","title":"\ud83d\udccc Acceso al objeto <code>document</code>","text":"<p>Se accede simplemente con la palabra clave <code>document</code>. No hace falta escribir <code>window.document</code>, aunque ambos son equivalentes.</p> <pre><code>console.log(document.title); // Devuelve el t\u00edtulo de la p\u00e1gina\nconsole.log(document.URL);   // Devuelve la URL actual\n</code></pre>"},{"location":"02-objetos-predefinidos/02-10-document/#propiedades-principales-de-document","title":"\ud83d\udccc Propiedades principales de <code>document</code>","text":""},{"location":"02-objetos-predefinidos/02-10-document/#informacion-del-documento","title":"Informaci\u00f3n del documento","text":"<pre><code>console.log(document.title);   // T\u00edtulo de la p\u00e1gina\nconsole.log(document.URL);     // URL completa\nconsole.log(document.domain);  // Dominio de la p\u00e1gina\n</code></pre>"},{"location":"02-objetos-predefinidos/02-10-document/#acceso-a-elementos","title":"Acceso a elementos","text":"<pre><code>// Devuelve el elemento con id=\"principal\"\nlet elemento = document.getElementById(\"principal\");\n\n// Devuelve todos los elementos &lt;p&gt;\nlet parrafos = document.getElementsByTagName(\"p\");\n\n// Devuelve todos los elementos con clase=\"destacado\"\nlet destacados = document.getElementsByClassName(\"destacado\");\n</code></pre>"},{"location":"02-objetos-predefinidos/02-10-document/#metodos-modernos-de-seleccion","title":"\ud83d\udccc M\u00e9todos modernos de selecci\u00f3n","text":"<p>En versiones m\u00e1s recientes de JavaScript se introdujeron querySelector y querySelectorAll, mucho m\u00e1s flexibles:</p> <pre><code>// Devuelve el primer &lt;p&gt; que encuentre\nlet parrafo = document.querySelector(\"p\");\n\n// Devuelve todos los elementos con clase=\"item\"\nlet items = document.querySelectorAll(\".item\");\n</code></pre> <p>Recomendaci\u00f3n</p> <p>Hoy en d\u00eda se recomienda usar querySelector y querySelectorAll en lugar de los m\u00e9todos antiguos, porque permiten usar selectores CSS.</p> <p>En la Unidad sobre DOM aprenderemos m\u00e1s sobre manipulaci\u00f3n de elementos del documento. </p>"},{"location":"02-objetos-predefinidos/02-10-document/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 representa el objeto <code>document</code> en el navegador?</li> <li>\u00bfQu\u00e9 diferencia hay entre <code>getElementById</code> y <code>querySelector</code>?</li> <li>\u00bfQu\u00e9 m\u00e9todos usar\u00edas para seleccionar todos los elementos con una clase espec\u00edfica?</li> <li>\u00bfC\u00f3mo puedes crear un nuevo p\u00e1rrafo y a\u00f1adirlo al final del documento?</li> <li>\u00bfQu\u00e9 diferencia hay entre <code>innerText</code> y <code>innerHTML</code> al modificar el contenido de un elemento?</li> </ol>"},{"location":"02-objetos-predefinidos/02-11-navigator/","title":"3.3 Navigator","text":"<p>El objeto <code>navigator</code> forma parte de <code>window</code> y nos proporciona informaci\u00f3n sobre el navegador, el sistema operativo y algunas capacidades del dispositivo. Se utiliza para detectar caracter\u00edsticas y adaptar el comportamiento de la aplicaci\u00f3n.</p>"},{"location":"02-objetos-predefinidos/02-11-navigator/#propiedades-principales-de-navigator","title":"\ud83d\udccc Propiedades principales de <code>navigator</code>","text":""},{"location":"02-objetos-predefinidos/02-11-navigator/#informacion-basica-del-navegador","title":"Informaci\u00f3n b\u00e1sica del navegador","text":"<pre><code>console.log(navigator.userAgent);   // Informaci\u00f3n del navegador y sistema\nconsole.log(navigator.language);    // Idioma preferido (ej. \"es-ES\")\nconsole.log(navigator.onLine);      // true si hay conexi\u00f3n a Internet\n</code></pre>"},{"location":"02-objetos-predefinidos/02-11-navigator/#informacion-sobre-la-plataforma","title":"Informaci\u00f3n sobre la plataforma","text":"<pre><code>console.log(navigator.platform);   // Sistema operativo (ej. \"Win32\", \"Linux x86_64\")\n</code></pre>"},{"location":"02-objetos-predefinidos/02-11-navigator/#cookies-y-almacenamiento","title":"Cookies y almacenamiento","text":"<pre><code>console.log(navigator.cookieEnabled); // true si las cookies est\u00e1n habilitadas\n</code></pre>"},{"location":"02-objetos-predefinidos/02-11-navigator/#deteccion-de-conexion","title":"\ud83d\udccc Detecci\u00f3n de conexi\u00f3n","text":"<p>Algunas propiedades permiten saber si el dispositivo est\u00e1 conectado o no:</p> <pre><code>if (navigator.onLine) {\n  console.log(\"Est\u00e1s conectado a Internet \u2705\");\n} else {\n  console.log(\"No hay conexi\u00f3n \u274c\");\n}\n</code></pre>"},{"location":"02-objetos-predefinidos/02-11-navigator/#geolocalizacion","title":"\ud83d\udccc Geolocalizaci\u00f3n","text":"<p>El objeto <code>navigator</code> incluye la API de geolocalizaci\u00f3n, que permite obtener la ubicaci\u00f3n del usuario (si acepta compartirla).</p> <pre><code>navigator.geolocation.getCurrentPosition(\n  (pos) =&gt; {\n    console.log(\"Latitud:\", pos.coords.latitude);\n    console.log(\"Longitud:\", pos.coords.longitude);\n  },\n  (error) =&gt; {\n    console.error(\"Error al obtener la ubicaci\u00f3n:\", error);\n  }\n);\n</code></pre> <p>Aviso de seguridad</p> <p>La geolocalizaci\u00f3n solo funciona si la p\u00e1gina se sirve por HTTPS y el usuario acepta expl\u00edcitamente compartir su ubicaci\u00f3n.</p>"},{"location":"02-objetos-predefinidos/02-11-navigator/#api-de-credenciales-y-dispositivos-mencion","title":"\ud83d\udccc API de credenciales y dispositivos (menci\u00f3n)","text":"<p>Los navegadores modernos han ido ampliando <code>navigator</code> con APIs espec\u00edficas, como:</p> <ul> <li><code>navigator.clipboard</code>: permite copiar y pegar en el portapapeles.</li> <li><code>navigator.mediaDevices</code>: acceso a c\u00e1mara y micr\u00f3fono.</li> </ul> <p>Podr\u00e1s encontrar m\u00e1s informaci\u00f3n sobre estas APIs en la documentaci\u00f3n oficial de Javascript. </p>"},{"location":"02-objetos-predefinidos/02-11-navigator/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 tipo de informaci\u00f3n devuelve <code>navigator.userAgent</code>?</li> <li>\u00bfC\u00f3mo puedes comprobar si un usuario tiene activadas las cookies?</li> <li>\u00bfQu\u00e9 propiedad de <code>navigator</code> te dice si hay conexi\u00f3n a Internet?</li> <li>\u00bfQu\u00e9 necesitas para que funcione la API de geolocalizaci\u00f3n?</li> <li>\u00bfQu\u00e9 otros recursos (adem\u00e1s de geolocalizaci\u00f3n) puedes gestionar a trav\u00e9s de <code>navigator</code> en navegadores modernos?</li> </ol>"},{"location":"02-objetos-predefinidos/02-12-screen/","title":"3.4 Screen","text":"<p>El objeto <code>screen</code> forma parte de <code>window</code> y proporciona informaci\u00f3n acerca de la pantalla f\u00edsica del dispositivo en el que se ejecuta la p\u00e1gina web. A diferencia de <code>innerWidth</code> o <code>innerHeight</code> (que miden el \u00e1rea visible de la ventana del navegador), <code>screen</code> ofrece datos de toda la pantalla.</p>"},{"location":"02-objetos-predefinidos/02-12-screen/#propiedades-principales-de-screen","title":"\ud83d\udccc Propiedades principales de <code>screen</code>","text":""},{"location":"02-objetos-predefinidos/02-12-screen/#tamano-total-de-la-pantalla","title":"Tama\u00f1o total de la pantalla","text":"<pre><code>console.log(screen.width);   // Anchura total de la pantalla en p\u00edxeles\nconsole.log(screen.height);  // Altura total de la pantalla en p\u00edxeles\n</code></pre>"},{"location":"02-objetos-predefinidos/02-12-screen/#area-disponible-para-el-navegador","title":"\u00c1rea disponible para el navegador","text":"<pre><code>console.log(screen.availWidth);   // Anchura disponible, sin contar barras del sistema operativo\nconsole.log(screen.availHeight);  // Altura disponible\n</code></pre>"},{"location":"02-objetos-predefinidos/02-12-screen/#profundidad-de-color","title":"Profundidad de color","text":"<pre><code>console.log(screen.colorDepth);  // Bits por p\u00edxel (ej. 24 para 16 millones de colores)\n</code></pre>"},{"location":"02-objetos-predefinidos/02-12-screen/#orientacion-de-la-pantalla","title":"Orientaci\u00f3n de la pantalla","text":"<p>Muchos navegadores incluyen la propiedad <code>orientation</code>, que indica si la pantalla est\u00e1 en vertical o horizontal.</p> <pre><code>console.log(screen.orientation.type); // \"landscape-primary\" o \"portrait-primary\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-12-screen/#diferencia-entre-window-y-screen","title":"\ud83d\udccc Diferencia entre <code>window</code> y <code>screen</code>","text":"<ul> <li><code>window.innerWidth</code> / <code>window.innerHeight</code>: se refieren al tama\u00f1o de la ventana del navegador (el \u00e1rea donde se dibuja la web).</li> <li><code>screen.width</code> / <code>screen.height</code>: se refieren al tama\u00f1o f\u00edsico de la pantalla completa.</li> </ul> <p>Importante</p> <p>Para dise\u00f1ar interfaces web adaptables, normalmente se usa <code>window.innerWidth</code> y <code>window.innerHeight</code>, no <code>screen.width</code>.</p>"},{"location":"02-objetos-predefinidos/02-12-screen/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre <code>screen.width</code> y <code>window.innerWidth</code>?</li> <li>\u00bfQu\u00e9 devuelve <code>screen.colorDepth</code>?</li> <li>\u00bfQu\u00e9 utilidad tienen las propiedades <code>availWidth</code> y <code>availHeight</code>?</li> <li>\u00bfC\u00f3mo puedes saber si la pantalla est\u00e1 en orientaci\u00f3n vertical u horizontal?</li> <li>\u00bfPor qu\u00e9 en dise\u00f1o responsive suele ser m\u00e1s importante usar <code>window</code> que <code>screen</code>?</li> </ol>"},{"location":"02-objetos-predefinidos/02-13-location/","title":"3.6 Location","text":"<p>El objeto <code>location</code> forma parte de <code>window</code> y proporciona informaci\u00f3n sobre la URL de la p\u00e1gina actual, adem\u00e1s de m\u00e9todos para redirigir o recargar la p\u00e1gina. Cada vez que accedes o modificas sus propiedades, est\u00e1s trabajando con la direcci\u00f3n en la que se encuentra tu documento.</p>"},{"location":"02-objetos-predefinidos/02-13-location/#propiedades-principales","title":"\ud83d\udccc Propiedades principales","text":"<pre><code>// URL completa\nconsole.log(location.href);  \n\n// Protocolo (http, https, file...)\nconsole.log(location.protocol);  \n\n// Nombre de dominio\nconsole.log(location.hostname);  \n\n// Puerto utilizado (si existe en la URL)\nconsole.log(location.port);  \n\n// Ruta despu\u00e9s del dominio\nconsole.log(location.pathname);  \n\n// Par\u00e1metros de la URL (query string)\nconsole.log(location.search);  \n\n// Fragmento o ancla (#)\nconsole.log(location.hash);  \n</code></pre>"},{"location":"02-objetos-predefinidos/02-13-location/#metodos-principales","title":"\ud83d\udccc M\u00e9todos principales","text":""},{"location":"02-objetos-predefinidos/02-13-location/#recargar-la-pagina","title":"Recargar la p\u00e1gina","text":"<pre><code>// Recarga desde cach\u00e9\nlocation.reload();  \n\n// Recarga desde el servidor (forzado)\nlocation.reload(true);\n</code></pre>"},{"location":"02-objetos-predefinidos/02-13-location/#redireccionar-a-otra-url","title":"Redireccionar a otra URL","text":"<pre><code>// Redirige a otra p\u00e1gina\nlocation.href = \"https://www.mozilla.org\";\n\n// Equivalente usando assign()\nlocation.assign(\"https://www.mozilla.org\");\n\n// Reemplaza la URL actual (no guarda en el historial)\nlocation.replace(\"https://www.mozilla.org\");\n</code></pre> <p>Diferencia entre assign() y replace()</p> <ul> <li><code>assign(url)</code>: cambia la p\u00e1gina y mantiene la actual en el historial (puedes volver con el bot\u00f3n Atr\u00e1s).</li> <li><code>replace(url)</code>: cambia la p\u00e1gina pero no guarda la actual en el historial.</li> </ul>"},{"location":"02-objetos-predefinidos/02-13-location/#ejemplo-practico","title":"\ud83d\udccc Ejemplo pr\u00e1ctico","text":"<pre><code>// Comprobar si estamos en HTTPS\nif (location.protocol !== \"https:\") {\n  console.log(\"\u00a1Aviso! La conexi\u00f3n no es segura.\");\n}\n</code></pre>"},{"location":"02-objetos-predefinidos/02-13-location/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 propiedad usar\u00edas para obtener el dominio de la p\u00e1gina actual?</li> <li>\u00bfQu\u00e9 diferencia hay entre <code>assign()</code> y <code>replace()</code>?</li> <li>\u00bfQu\u00e9 devuelve <code>location.search</code> si la URL es <code>https://ejemplo.com/index.html?id=5</code>?</li> <li>\u00bfQu\u00e9 m\u00e9todo usar\u00edas para forzar una recarga desde el servidor?</li> <li>\u00bfQu\u00e9 pasa si asignas un valor a <code>location.href</code>?</li> </ol>"},{"location":"02-objetos-predefinidos/02-14-history/","title":"3.5 History","text":"<p>El objeto <code>history</code> forma parte de <code>window</code> y permite acceder y manipular el historial de p\u00e1ginas visitadas en la sesi\u00f3n del navegador. Con \u00e9l podemos avanzar, retroceder o cargar URLs espec\u00edficas dentro del historial.</p>"},{"location":"02-objetos-predefinidos/02-14-history/#propiedades-principales","title":"\ud83d\udccc Propiedades principales","text":""},{"location":"02-objetos-predefinidos/02-14-history/#numero-de-paginas-en-el-historial","title":"N\u00famero de p\u00e1ginas en el historial","text":"<pre><code>console.log(history.length);  \n// Devuelve cu\u00e1ntas entradas hay en el historial actual\n</code></pre>"},{"location":"02-objetos-predefinidos/02-14-history/#metodos-principales","title":"\ud83d\udccc M\u00e9todos principales","text":""},{"location":"02-objetos-predefinidos/02-14-history/#ir-hacia-atras-y-hacia-adelante","title":"Ir hacia atr\u00e1s y hacia adelante","text":"<pre><code>history.back();   // Equivale a pulsar el bot\u00f3n \"Atr\u00e1s\" del navegador\nhistory.forward(); // Equivale al bot\u00f3n \"Adelante\"\n</code></pre>"},{"location":"02-objetos-predefinidos/02-14-history/#navegar-a-una-posicion-concreta","title":"Navegar a una posici\u00f3n concreta","text":"<pre><code>history.go(-1); // Una p\u00e1gina atr\u00e1s\nhistory.go(1);  // Una p\u00e1gina adelante\nhistory.go(0);  // Recarga la p\u00e1gina actual\n</code></pre>"},{"location":"02-objetos-predefinidos/02-14-history/#anadir-o-modificar-entradas-del-historial","title":"A\u00f1adir o modificar entradas del historial","text":"<p>Desde HTML5, <code>history</code> permite manipular el historial sin recargar la p\u00e1gina, lo que resulta muy \u00fatil en aplicaciones SPA (Single Page Applications).</p> <pre><code>// A\u00f1ade una nueva entrada\nhistory.pushState({ usuario: \"Laura\" }, \"T\u00edtulo\", \"/perfil\");\n\n// Modifica la entrada actual\nhistory.replaceState({ usuario: \"Laura\" }, \"T\u00edtulo\", \"/inicio\");\n</code></pre> <p>Los objetos pasados como primer argumento (<code>{ usuario: \"Laura\" }</code>) quedan almacenados y se pueden recuperar m\u00e1s adelante.</p>"},{"location":"02-objetos-predefinidos/02-14-history/#eventos-relacionados","title":"\ud83d\udccc Eventos relacionados","text":"<p>Cuando el usuario navega hacia atr\u00e1s o hacia adelante y cambia el estado de la URL, se dispara el evento <code>popstate</code>:</p> <pre><code>window.addEventListener(\"popstate\", (event) =&gt; {\n  console.log(\"Estado actual:\", event.state);\n});\n</code></pre> <p>Compatibilidad</p> <p>Aunque <code>history.pushState</code> y <code>history.replaceState</code> est\u00e1n soportados en todos los navegadores modernos, requieren que la p\u00e1gina est\u00e9 servida desde un servidor web. Si pruebas con archivos locales (<code>file://</code>), algunos navegadores pueden dar errores.</p>"},{"location":"02-objetos-predefinidos/02-14-history/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 hace <code>history.back()</code>?</li> <li>\u00bfQu\u00e9 diferencia hay entre <code>pushState</code> y <code>replaceState</code>?</li> <li>\u00bfQu\u00e9 ocurre si ejecutas <code>history.go(0)</code>?</li> <li>\u00bfQu\u00e9 evento se dispara al cambiar de estado en el historial?</li> <li>\u00bfQu\u00e9 devuelve <code>history.length</code>?</li> </ol>"},{"location":"02-objetos-predefinidos/02-15-control-tiempo/","title":"3.7 Control de tiempo en JavaScript","text":"<p>Los m\u00e9todos para controlar el tiempo en JavaScript forman parte del objeto <code>window</code>, ya que dependen del navegador. Con ellos podemos programar la ejecuci\u00f3n de funciones en el futuro, ya sea una \u00fanica vez (<code>setTimeout</code>) o de manera repetida (<code>setInterval</code>). Ambos m\u00e9todos devuelven un identificador que nos permite detener la ejecuci\u00f3n con <code>clearTimeout</code> y <code>clearInterval</code>.</p> <p>\u00bfQuieres que actualice toda la lecci\u00f3n con este nuevo arranque, o solo quieres a\u00f1adir este bloque al principio y dejar lo dem\u00e1s igual?</p>"},{"location":"02-objetos-predefinidos/02-15-control-tiempo/#settimeout","title":"\ud83d\udccc setTimeout()","text":"<p>Ejecuta una funci\u00f3n una sola vez despu\u00e9s de que transcurra un tiempo en milisegundos.</p> <pre><code>// Sintaxis b\u00e1sica\nsetTimeout(funci\u00f3n, tiempoEnMilisegundos);\n\n//Ejemplo con funci\u00f3n tradicional\nfunction mostrarMensaje() {\n  console.log(\"Han pasado 2 segundos\");\n}\nsetTimeout(mostrarMensaje, 2000);\n\n\n// Ejemplo con funci\u00f3n flecha\nsetTimeout(() =&gt; {\n  console.log(\"Han pasado 2 segundos\");\n}, 2000);\n</code></pre>"},{"location":"02-objetos-predefinidos/02-15-control-tiempo/#cleartimeout","title":"\ud83d\udccc clearTimeout()","text":"<p>Detiene la ejecuci\u00f3n programada por <code>setTimeout</code>.</p> <pre><code>// Programamos un mensaje que deber\u00eda mostrarse en 3 segundos\nlet id = setTimeout(() =&gt; {\n  console.log(\"Este mensaje no aparecer\u00e1\");\n}, 3000);\n\n// Cancelamos el temporizador inmediatamente\nclearTimeout(id);\n\nconsole.log(\"El temporizador ha sido cancelado \u2705\");\n</code></pre>"},{"location":"02-objetos-predefinidos/02-15-control-tiempo/#setinterval","title":"\ud83d\udccc setInterval()","text":"<p>Ejecuta una funci\u00f3n de manera repetida cada cierto intervalo de tiempo (en milisegundos).</p> <pre><code>let id = setInterval(() =&gt; {\n  console.log(\"Esto se repite cada segundo\");\n}, 1000);\n</code></pre>"},{"location":"02-objetos-predefinidos/02-15-control-tiempo/#clearinterval","title":"\ud83d\udccc clearInterval()","text":"<p>Detiene la ejecuci\u00f3n repetida iniciada con <code>setInterval</code>.</p> <pre><code>let contador = 0;\n\nlet id = setInterval(() =&gt; {\n  contador++;\n  console.log(\"Tick \" + contador);\n\n  if (contador === 5) {\n    clearInterval(id); // Detener despu\u00e9s de 5 repeticiones\n  }\n}, 1000);\n</code></pre> <p>Precauci\u00f3n con los temporizadores</p> <p>Usar muchos <code>setInterval</code> o temporizadores con tiempos muy cortos puede afectar al rendimiento de la p\u00e1gina. Es recomendable limpiar siempre los temporizadores que ya no sean necesarios.</p>"},{"location":"02-objetos-predefinidos/02-15-control-tiempo/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre <code>setTimeout</code> y <code>setInterval</code>?</li> <li>\u00bfQu\u00e9 devuelve un temporizador y para qu\u00e9 sirve ese valor?</li> <li>\u00bfC\u00f3mo detendr\u00edas un <code>setTimeout</code> antes de que se ejecute?</li> <li>\u00bfQu\u00e9 pasar\u00eda si olvidas usar <code>clearInterval</code> en un intervalo infinito?</li> <li>\u00bfC\u00f3mo har\u00edas que un mensaje aparezca 5 veces con un intervalo de 1 segundo y luego se detenga autom\u00e1ticamente?</li> </ol>"},{"location":"03-funciones-arrays-objetos/03-01-01-funciones-1/","title":"3.1.1. Funciones (I): Fundamentos","text":"<p>Las funciones son bloques de c\u00f3digo que permiten organizar, reutilizar y estructurar mejor un programa.  </p>"},{"location":"03-funciones-arrays-objetos/03-01-01-funciones-1/#declaracion-de-funciones-tradicionales","title":"\ud83d\udccc Declaraci\u00f3n de funciones tradicionales","text":"<p>Las funciones tradicionales se definen con la palabra clave <code>function</code>. Se pueden declarar con nombre (funciones nombradas) o sin nombre (funciones an\u00f3nimas, que veremos m\u00e1s adelante).</p> <pre><code>// Funci\u00f3n nombrada\nfunction saludar(nombre) {\n  return `Hola, ${nombre}`;\n}\n\nconsole.log(saludar(\"Laura\")); // Hola, Laura\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-01-01-funciones-1/#funciones-flecha-arrow-functions","title":"\ud83d\udccc Funciones flecha (arrow functions)","text":"<p>Las funciones flecha se introdujeron en ES6 y ofrecen una forma m\u00e1s corta y expresiva de escribir funciones. Adem\u00e1s, heredan el <code>this</code> del contexto donde se crean.</p>"},{"location":"03-funciones-arrays-objetos/03-01-01-funciones-1/#sintaxis-basica","title":"Sintaxis b\u00e1sica","text":"<pre><code>const saludar = () =&gt; {\n  console.log(\"Hola mundo\");\n};\n\nsaludar(); // Hola mundo\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-01-01-funciones-1/#con-un-solo-argumento","title":"Con un solo argumento","text":"<pre><code>const saludar = nombre =&gt; {\n  console.log(`Hola, ${nombre}`);\n};\n\nsaludar(\"Laura\"); // Hola, Laura\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-01-01-funciones-1/#con-varios-argumentos","title":"Con varios argumentos","text":"<pre><code>const sumar = (a, b) =&gt; {\n  return a + b;\n};\n\nconsole.log(sumar(3, 4)); // 7\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-01-01-funciones-1/#retorno-implicito","title":"Retorno impl\u00edcito","text":"<pre><code>const cuadrado = x =&gt; x * x;\n\nconsole.log(cuadrado(5)); // 25\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-01-01-funciones-1/#sin-argumentos","title":"Sin argumentos","text":"<pre><code>const obtenerHora = () =&gt; new Date().toLocaleTimeString();\n\nconsole.log(obtenerHora()); // Ejemplo: \"10:45:12\"\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-01-01-funciones-1/#funciones-flecha-como-callbacks","title":"\ud83d\udccc Funciones flecha como callbacks","text":"<p>Las funciones flecha se usan mucho como callbacks en m\u00e9todos de arrays (<code>map</code>, <code>filter</code>, <code>reduce</code>), porque hacen el c\u00f3digo m\u00e1s claro.</p> <pre><code>const numeros = [1, 2, 3, 4, 5];\n\n// Con funci\u00f3n tradicional\nconst dobles1 = numeros.map(function(n) {\n  return n * 2;\n});\n\n// Con funci\u00f3n flecha\nconst dobles2 = numeros.map(n =&gt; n * 2);\n\nconsole.log(dobles2); // [2, 4, 6, 8, 10]\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-01-01-funciones-1/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 palabra clave se utiliza para declarar una funci\u00f3n tradicional?</li> <li>Escribe una funci\u00f3n flecha que devuelva el triple de un n\u00famero.</li> <li>\u00bfQu\u00e9 diferencia hay entre usar llaves <code>{}</code> y no usarlas en una funci\u00f3n flecha?</li> <li>Crea una funci\u00f3n flecha sin argumentos que devuelva la fecha actual.</li> <li>Transforma esta funci\u00f3n tradicional en una funci\u00f3n flecha con retorno impl\u00edcito: <pre><code>function resta(a, b) {\n  return a - b;\n}\n</code></pre></li> </ol>"},{"location":"03-funciones-arrays-objetos/03-01-02-funciones-2/","title":"3.1.2. Funciones (II): Uso avanzado","text":"<p>En esta lecci\u00f3n vamos a profundizar en otros usos comunes de las funciones en JavaScript: funciones an\u00f3nimas, funciones de callback y par\u00e1metros por defecto.</p>"},{"location":"03-funciones-arrays-objetos/03-01-02-funciones-2/#funciones-anonimas","title":"\ud83d\udccc Funciones an\u00f3nimas","text":"<p>Una funci\u00f3n an\u00f3nima es aquella que no tiene nombre propio. Se suelen usar asign\u00e1ndolas a una variable o pas\u00e1ndolas directamente como argumento a otra funci\u00f3n.</p> <pre><code>// Asignada a una variable\nconst cuadrado = function(x) {\n  return x * x;\n};\n\nconsole.log(cuadrado(4)); // 16\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-01-02-funciones-2/#funciones-de-callback","title":"\ud83d\udccc Funciones de callback","text":"<p>Un callback es una funci\u00f3n que se pasa como argumento a otra y que se ejecuta despu\u00e9s de que esta la llame. Son muy comunes en JavaScript, especialmente en asincron\u00eda y en m\u00e9todos de arrays.</p> <pre><code>function procesarUsuario(nombre, callback) {\n  console.log(`Procesando usuario: ${nombre}`);\n  callback();\n}\n\n// Pasamos una funci\u00f3n an\u00f3nima como callback\nprocesarUsuario(\"Laura\", function() {\n  console.log(\"Callback ejecutado \u2705\");\n});\n\n// O una funci\u00f3n flecha\nprocesarUsuario(\"Laura\", () =&gt; {\n  console.log(\"Callback con funci\u00f3n flecha \u2705\");\n});\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-01-02-funciones-2/#parametros-por-defecto","title":"\ud83d\udccc Par\u00e1metros por defecto","text":"<p>Los par\u00e1metros por defecto permiten dar un valor inicial a un argumento de la funci\u00f3n si no se proporciona al llamarla. Esto evita tener que comprobar manualmente si el par\u00e1metro existe.</p> <pre><code>function saludar(nombre = \"invitado\") {\n  console.log(`Hola, ${nombre}`);\n}\n\nsaludar();        // Hola, invitado\nsaludar(\"Laura\"); // Hola, Laura\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-01-02-funciones-2/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 es una funci\u00f3n an\u00f3nima y en qu\u00e9 casos se suele usar?</li> <li>\u00bfQu\u00e9 es un callback? Pon un ejemplo sencillo.</li> <li>Crea una funci\u00f3n que reciba un nombre y un callback, y que ejecute el callback con ese nombre.</li> <li>Declara una funci\u00f3n con un par\u00e1metro por defecto llamado <code>idioma</code> que valga <code>\"es\"</code>.</li> <li>Escribe una llamada a esa funci\u00f3n con y sin pasarle el argumento.</li> </ol> <p>```</p>"},{"location":"03-funciones-arrays-objetos/03-01-03-funciones-3/","title":"3.1.3. Funciones (III): Par\u00e1metros y closures","text":"<p>En esta lecci\u00f3n aprender\u00e1s a manejar funciones que aceptan un n\u00famero variable de argumentos y a comprender el concepto de closure, clave en JavaScript.</p>"},{"location":"03-funciones-arrays-objetos/03-01-03-funciones-3/#el-objeto-arguments","title":"\ud83d\udccc El objeto <code>arguments</code>","text":"<p>Antes de ES6, cuando quer\u00edamos que una funci\u00f3n aceptara un n\u00famero indefinido de argumentos, se usaba el objeto especial <code>arguments</code>.  </p> <p>Este objeto se genera autom\u00e1ticamente dentro de cualquier funci\u00f3n tradicional (no funciona en funciones flecha).</p> <pre><code>function sumar() {\n  let total = 0;\n  for (let i = 0; i &lt; arguments.length; i++) {\n    total += arguments[i];\n  }\n  return total;\n}\n\nconsole.log(sumar(1, 2, 3)); // 6\n</code></pre> <p>Problemas de <code>arguments</code></p> <ul> <li>No es un array real, sino un objeto parecido a array (array-like).</li> <li>No funciona en funciones flecha.</li> <li>Hace el c\u00f3digo menos claro y menos moderno.</li> </ul>"},{"location":"03-funciones-arrays-objetos/03-01-03-funciones-3/#parametros-rest","title":"\ud83d\udccc Par\u00e1metros rest (<code>...</code>)","text":"<p>Con ES6 llegaron los par\u00e1metros rest, que sustituyen a <code>arguments</code> de una forma m\u00e1s clara. Los valores extra se agrupan en un array real, mucho m\u00e1s c\u00f3modo de usar.</p> <pre><code>function sumar(...numeros) {\n  return numeros.reduce((a, b) =&gt; a + b, 0);\n}\n\nconsole.log(sumar(1, 2, 3));     // 6\nconsole.log(sumar(4, 5, 6, 7));  // 22\n</code></pre> <p>Ventajas frente a <code>arguments</code></p> <ul> <li>Genera arrays reales (con m\u00e9todos como <code>.map</code>, <code>.filter</code>, <code>.reduce</code>).  </li> <li>Funciona en cualquier tipo de funci\u00f3n, incluidas las flecha.  </li> <li>Hace el c\u00f3digo m\u00e1s legible y moderno.  </li> </ul>"},{"location":"03-funciones-arrays-objetos/03-01-03-funciones-3/#closures-cierres","title":"\ud83d\udccc Closures (cierres)","text":"<p>Un closure ocurre cuando una funci\u00f3n recuerda el entorno en el que fue creada, incluso despu\u00e9s de que ese entorno haya terminado.</p> <p>Sirve para encapsular datos y crear variables privadas.</p> <pre><code>function crearContador() {\n  let contador = 0;\n\n  return function() {\n    contador++;\n    return contador;\n  };\n}\n\nconst contar = crearContador();\n\nconsole.log(contar()); // 1\nconsole.log(contar()); // 2\nconsole.log(contar()); // 3\n</code></pre> <p>En este ejemplo, la variable <code>contador</code> se mantiene en memoria gracias al closure, aunque la funci\u00f3n <code>crearContador</code> ya haya terminado su ejecuci\u00f3n.</p>"},{"location":"03-funciones-arrays-objetos/03-01-03-funciones-3/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 limitaciones tiene el objeto <code>arguments</code>?</li> <li>\u00bfEn qu\u00e9 se diferencian <code>arguments</code> y los par\u00e1metros rest (<code>...</code>)?</li> <li>Escribe una funci\u00f3n que reciba cualquier n\u00famero de valores y devuelva su promedio.</li> <li>\u00bfQu\u00e9 es un closure y para qu\u00e9 se utiliza?</li> <li>Crea un closure que guarde un valor secreto y devuelva una funci\u00f3n para leerlo.</li> </ol>"},{"location":"03-funciones-arrays-objetos/03-02-01-arrays-fundamentos/","title":"3.2.1 Array (I): Fundamentos","text":"<p>Los arrays en JavaScript son estructuras de datos que permiten almacenar varios valores en una sola variable. Son muy \u00fatiles cuando queremos trabajar con listas de elementos (n\u00fameros, cadenas, objetos...).</p>"},{"location":"03-funciones-arrays-objetos/03-02-01-arrays-fundamentos/#que-es-un-array","title":"\ud83d\udccc \u00bfQu\u00e9 es un array?","text":"<p>Un array es una lista ordenada de elementos que se indexan comenzando desde 0. Cada valor dentro del array se llama elemento, y se accede a \u00e9l mediante su \u00edndice.</p> <pre><code>// Declaraci\u00f3n de un array\nlet frutas = [\"manzana\", \"pl\u00e1tano\", \"naranja\"];\n\n// Acceder al primer elemento\nconsole.log(frutas[0]); // \"manzana\"\n\n// Acceder al segundo elemento\nconsole.log(frutas[1]); // \"pl\u00e1tano\"\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-01-arrays-fundamentos/#longitud-de-un-array","title":"\ud83d\udccc Longitud de un array","text":"<p>La propiedad <code>.length</code> devuelve el n\u00famero total de elementos en el array.</p> <pre><code>let frutas = [\"manzana\", \"pl\u00e1tano\", \"naranja\"];\nconsole.log(frutas.length); // 3\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-01-arrays-fundamentos/#arrays-multidimensionales","title":"\ud83d\udccc Arrays multidimensionales","text":"<p>Un array puede contener otros arrays en su interior, formando arrays multidimensionales. Esto es \u00fatil, por ejemplo, para representar tablas.</p> <pre><code>let tabla = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\nconsole.log(tabla[0][1]); // 2 (primera fila, segunda columna)\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-01-arrays-fundamentos/#metodos-basicos-para-modificar-arrays","title":"\ud83d\udccc M\u00e9todos b\u00e1sicos para modificar arrays","text":"<p>Los arrays incluyen m\u00e9todos muy usados para a\u00f1adir o eliminar elementos.</p> <pre><code>let numeros = [1, 2, 3];\n\n// A\u00f1adir al final\nnumeros.push(4);\nconsole.log(numeros); // [1, 2, 3, 4]\n\n// Eliminar el \u00faltimo\nnumeros.pop();\nconsole.log(numeros); // [1, 2, 3]\n\n// A\u00f1adir al principio\nnumeros.unshift(0);\nconsole.log(numeros); // [0, 1, 2, 3]\n\n// Eliminar el primero\nnumeros.shift();\nconsole.log(numeros); // [1, 2, 3]\n</code></pre> <p>Diferencia entre arrays y objetos</p> <p>Aunque los arrays son un tipo especial de objeto en JavaScript, est\u00e1n pensados para almacenar datos en orden num\u00e9rico (\u00edndices). Los objetos, en cambio, almacenan pares clave-valor, lo que los hace m\u00e1s adecuados para datos con propiedades.</p>"},{"location":"03-funciones-arrays-objetos/03-02-01-arrays-fundamentos/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 \u00edndice tiene el primer elemento de un array en JavaScript?</li> <li>\u00bfQu\u00e9 devuelve la propiedad <code>.length</code> de un array?</li> <li>\u00bfC\u00f3mo acceder\u00edas al n\u00famero <code>6</code> dentro del array bidimensional <code>[[1,2,3],[4,5,6]]</code>?</li> <li>\u00bfQu\u00e9 m\u00e9todo se usa para a\u00f1adir un elemento al final de un array?</li> <li>\u00bfQu\u00e9 m\u00e9todo elimina el primer elemento de un array?</li> </ol>"},{"location":"03-funciones-arrays-objetos/03-02-02-arrays-iteracion-transformacion/","title":"3.2.2 Array (II): Iteraci\u00f3n y transformaci\u00f3n","text":"<p>Adem\u00e1s de almacenar datos, los arrays en JavaScript ofrecen muchos m\u00e9todos para recorrerlos y transformarlos. Estos m\u00e9todos son fundamentales para trabajar de forma moderna y clara con colecciones de datos.</p>"},{"location":"03-funciones-arrays-objetos/03-02-02-arrays-iteracion-transformacion/#recorrer-un-array-con-bucles-tradicionales","title":"\ud83d\udccc Recorrer un array con bucles tradicionales","text":"<p>Puedes recorrer un array con los bucles que ya conoces (<code>for</code>, <code>for...of</code>, etc.).</p> <pre><code>let frutas = [\"manzana\", \"pl\u00e1tano\", \"naranja\"];\n\n// Con un for cl\u00e1sico\nfor (let i = 0; i &lt; frutas.length; i++) {\n  console.log(frutas[i]);\n}\n\n// Con for...of\nfor (let fruta of frutas) {\n  console.log(fruta);\n}\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-02-arrays-iteracion-transformacion/#otros-metodos-de-iteracion-y-transformacion","title":"\ud83d\udccc Otros m\u00e9todos de iteraci\u00f3n y transformaci\u00f3n","text":""},{"location":"03-funciones-arrays-objetos/03-02-02-arrays-iteracion-transformacion/#foreach","title":"forEach()","text":"<p>El m\u00e9todo <code>.forEach()</code> ejecuta una funci\u00f3n para cada elemento del array.</p> <pre><code>let numeros = [1, 2, 3, 4];\n\nnumeros.forEach((n) =&gt; {\n  console.log(n * 2);\n});\n// 2, 4, 6, 8\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-02-arrays-iteracion-transformacion/#map","title":"map()","text":"<p>El m\u00e9todo <code>.map()</code> crea un nuevo array aplicando una funci\u00f3n a cada elemento.</p> <pre><code>let numeros = [1, 2, 3, 4];\n\n// Crear un nuevo array con los n\u00fameros al cuadrado\nlet cuadrados = numeros.map((n) =&gt; n * n);\n\nconsole.log(cuadrados); // [1, 4, 9, 16]\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-02-arrays-iteracion-transformacion/#filter","title":"filter()","text":"<p>El m\u00e9todo <code>.filter()</code> devuelve un nuevo array con los elementos que cumplen una condici\u00f3n.</p> <pre><code>let numeros = [1, 2, 3, 4, 5, 6];\n\n// Filtrar los pares\nlet pares = numeros.filter((n) =&gt; n % 2 === 0);\n\nconsole.log(pares); // [2, 4, 6]\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-02-arrays-iteracion-transformacion/#reduce","title":"reduce()","text":"<p>El m\u00e9todo <code>.reduce()</code> acumula los valores del array en un \u00fanico resultado.</p> <pre><code>let numeros = [1, 2, 3, 4];\n\n// Sumar todos los n\u00fameros\nlet suma = numeros.reduce((acumulador, actual) =&gt; acumulador + actual, 0);\n\nconsole.log(suma); // 10\n</code></pre> <p>Elegir el m\u00e9todo adecuado</p> <ul> <li>Usa forEach cuando solo quieras ejecutar algo para cada elemento.</li> <li>Usa map si necesitas transformar el array en otro.</li> <li>Usa filter si quieres seleccionar algunos elementos.</li> <li>Usa reduce si necesitas un \u00fanico valor como suma, producto o concatenaci\u00f3n.</li> </ul>"},{"location":"03-funciones-arrays-objetos/03-02-02-arrays-iteracion-transformacion/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre <code>forEach</code> y <code>map</code>?</li> <li>\u00bfQu\u00e9 devuelve el m\u00e9todo <code>filter</code>?</li> <li>\u00bfQu\u00e9 valor inicial puede recibir <code>reduce</code> como segundo argumento?</li> <li>Si tienes <code>[1,2,3,4,5]</code>, \u00bfc\u00f3mo obtendr\u00edas solo los n\u00fameros mayores que 3 usando <code>filter</code>?</li> <li>\u00bfQu\u00e9 m\u00e9todo usar\u00edas para calcular la multiplicaci\u00f3n de todos los n\u00fameros de un array?</li> </ol>"},{"location":"03-funciones-arrays-objetos/03-02-03-arrays-busqueda-ordenacion/","title":"3.2.3 Array (III): M\u00e9todos de b\u00fasqueda y ordenaci\u00f3n","text":"<p>Adem\u00e1s de recorrer y transformar arrays, JavaScript proporciona m\u00e9todos para buscar elementos y ordenar datos de manera eficiente.</p>"},{"location":"03-funciones-arrays-objetos/03-02-03-arrays-busqueda-ordenacion/#metodos-de-busqueda","title":"\ud83d\udccc M\u00e9todos de b\u00fasqueda","text":""},{"location":"03-funciones-arrays-objetos/03-02-03-arrays-busqueda-ordenacion/#indexof-y-lastindexof","title":"indexOf() y lastIndexOf()","text":"<ul> <li><code>indexOf(valor)</code> devuelve la primera posici\u00f3n en la que aparece un valor (o <code>-1</code> si no existe).</li> <li><code>lastIndexOf(valor)</code> devuelve la \u00faltima posici\u00f3n.</li> </ul> <pre><code>let frutas = [\"manzana\", \"pera\", \"naranja\", \"pera\"];\n\nconsole.log(frutas.indexOf(\"pera\"));     // 1\nconsole.log(frutas.lastIndexOf(\"pera\")); // 3\nconsole.log(frutas.indexOf(\"kiwi\"));     // -1\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-03-arrays-busqueda-ordenacion/#includes","title":"includes()","text":"<p>Comprueba si un array contiene un valor.</p> <pre><code>let numeros = [10, 20, 30];\n\nconsole.log(numeros.includes(20)); // true\nconsole.log(numeros.includes(40)); // false\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-03-arrays-busqueda-ordenacion/#find-y-findindex","title":"find() y findIndex()","text":"<ul> <li><code>find()</code> devuelve el primer elemento que cumple una condici\u00f3n.</li> <li><code>findIndex()</code> devuelve la posici\u00f3n de ese elemento.</li> </ul> <pre><code>let numeros = [5, 12, 8, 130, 44];\n\nconsole.log(numeros.find(n =&gt; n &gt; 10));      // 12\nconsole.log(numeros.findIndex(n =&gt; n &gt; 10)); // 1\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-03-arrays-busqueda-ordenacion/#some-y-every","title":"some() y every()","text":"<ul> <li><code>some()</code> devuelve <code>true</code> si alg\u00fan elemento cumple la condici\u00f3n.</li> <li><code>every()</code> devuelve <code>true</code> si todos los elementos cumplen la condici\u00f3n.</li> </ul> <pre><code>let numeros = [2, 4, 6, 8];\n\nconsole.log(numeros.some(n =&gt; n &gt; 5));         // true\nconsole.log(numeros.every(n =&gt; n % 2 === 0));  // true\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-03-arrays-busqueda-ordenacion/#metodos-de-ordenacion","title":"\ud83d\udccc M\u00e9todos de ordenaci\u00f3n","text":""},{"location":"03-funciones-arrays-objetos/03-02-03-arrays-busqueda-ordenacion/#sort","title":"sort()","text":"<p>Ordena los elementos de un array. Por defecto, ordena como strings, lo que puede dar resultados inesperados.</p> <pre><code>let letras = [\"d\", \"a\", \"c\", \"b\"];\nconsole.log(letras.sort()); // [\"a\", \"b\", \"c\", \"d\"]\n\nlet numeros = [10, 2, 30, 1];\n// \u00a1Ojo! Los ordena como strings\nconsole.log(numeros.sort()); // [1, 10, 2, 30]\n\n// Orden num\u00e9rico correcto\nconsole.log(numeros.sort((a, b) =&gt; a - b)); // [1, 2, 10, 30]\n</code></pre> <p>Cuidado con sort()</p> <p>Si no proporcionas una funci\u00f3n de comparaci\u00f3n, <code>sort()</code> convierte los elementos a texto y los ordena alfab\u00e9ticamente. Por eso, al ordenar n\u00fameros, es recomendable siempre dar una funci\u00f3n <code>(a, b) =&gt; a - b</code>.</p>"},{"location":"03-funciones-arrays-objetos/03-02-03-arrays-busqueda-ordenacion/#reverse","title":"reverse()","text":"<p>Invierte el orden de los elementos de un array.</p> <pre><code>let numeros = [1, 2, 3, 4, 5];\nconsole.log(numeros.reverse()); // [5, 4, 3, 2, 1]\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-03-arrays-busqueda-ordenacion/#inciso-sobre-sort","title":"\ud83d\udccc Inciso sobre sort()","text":"<p>El m\u00e9todo <code>sort()</code> convierte los elementos a cadenas de texto antes de ordenarlos, lo que provoca que los n\u00fameros no siempre se ordenen como esperar\u00edas.</p>"},{"location":"03-funciones-arrays-objetos/03-02-03-arrays-busqueda-ordenacion/#ejemplo-con-numeros","title":"Ejemplo con n\u00fameros","text":"<pre><code>let numeros = [2, 100, 15, 7];\n\n// Ordena como si fueran strings\nconsole.log(numeros.sort()); \n// [100, 15, 2, 7]\n\n// Orden correcto con funci\u00f3n de comparaci\u00f3n\nconsole.log(numeros.sort((a, b) =&gt; a - b)); \n// [2, 7, 15, 100]\n</code></pre> <p>Por qu\u00e9 ocurre esto</p> <p><code>sort()</code> sin funci\u00f3n compara los valores como texto, siguiendo el orden Unicode. Por eso <code>\"100\"</code> se coloca antes que <code>\"2\"</code>, igual que en un diccionario \"c\" va antes que \"ca\".</p>"},{"location":"03-funciones-arrays-objetos/03-02-03-arrays-busqueda-ordenacion/#ejemplo-con-objetos","title":"Ejemplo con objetos","text":"<p>Si tenemos un array de objetos, tambi\u00e9n necesitamos una funci\u00f3n de comparaci\u00f3n para ordenar por alguna propiedad.</p> <pre><code>let personas = [\n  { nombre: \"Laura\", edad: 28 },\n  { nombre: \"Ana\", edad: 22 },\n  { nombre: \"Pedro\", edad: 35 }\n];\n\n// Ordenar por edad (de menor a mayor)\nconsole.log(personas.sort((a, b) =&gt; a.edad - b.edad));\n/*\n[\n  { nombre: \"Ana\", edad: 22 },\n  { nombre: \"Laura\", edad: 28 },\n  { nombre: \"Pedro\", edad: 35 }\n]*/\n\n// Ordenar por nombre (alfab\u00e9ticamente)\nconsole.log(personas.sort((a, b) =&gt; a.nombre.localeCompare(b.nombre)));\n/*\n[\n  { nombre: \"Ana\", edad: 22 },\n  { nombre: \"Laura\", edad: 28 },\n  { nombre: \"Pedro\", edad: 35 }\n]\n*/\n</code></pre> <p>Consejo</p> <p>Cuando trabajes con arrays de objetos, piensa siempre qu\u00e9 propiedad quieres usar para ordenar y define una funci\u00f3n de comparaci\u00f3n adecuada.</p>"},{"location":"03-funciones-arrays-objetos/03-02-03-arrays-busqueda-ordenacion/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre <code>find</code> y <code>filter</code>?</li> <li>\u00bfQu\u00e9 m\u00e9todo usar\u00edas para comprobar si todos los elementos de un array son mayores que 0?</li> <li>\u00bfPor qu\u00e9 <code>sort()</code> puede dar resultados extra\u00f1os al ordenar n\u00fameros?</li> <li>\u00bfC\u00f3mo invertir\u00edas un array en JavaScript?</li> <li>Si tienes <code>[\"rojo\",\"azul\",\"verde\"]</code>, \u00bfqu\u00e9 devuelve <code>indexOf(\"verde\")</code>?</li> </ol>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/","title":"3.2.4 Array (IV): Manipulaci\u00f3n avanzada y buenas pr\u00e1cticas","text":"<p>En esta lecci\u00f3n veremos c\u00f3mo copiar, reordenar, insertar, eliminar y aplanar arrays, con especial atenci\u00f3n a los m\u00e9todos no mutables introducidos recientemente y a patrones recomendados.</p>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#metodos-que-no-mutan-el-array-original-recomendados","title":"\ud83d\udccc M\u00e9todos que no mutan el array original (recomendados)","text":"<p>Estos devuelven nuevos arrays y dejan intacto el original. Son ideales cuando quieres mantener inmutabilidad (por ejemplo, en interfaces reactivas).</p>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#copias-y-cortes-no-destructivos","title":"Copias y cortes (no destructivos)","text":"<pre><code>const nums = [10, 20, 30, 40];\n\n// slice(inicio, finExcl) \u2192 devuelve una porci\u00f3n sin modificar el original\nconst parte = nums.slice(1, 3);     // [20, 30]\n\n// concat(...arrs) \u2192 une arrays, no muta\nconst unidos = [1, 2].concat([3, 4]); // [1, 2, 3, 4]\n\n// spread (...) \u2192 copia superficial o uni\u00f3n r\u00e1pida\nconst copia = [...nums];              // [10, 20, 30, 40]\nconst unidos2 = [...[1, 2], ...[3, 4]]; // [1, 2, 3, 4]\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#reordenacion-no-destructiva-es2023","title":"Reordenaci\u00f3n no destructiva (ES2023)","text":"<pre><code>const a = [3, 1, 2];\n\n// toSorted(cmp?) \u2192 como sort() pero NO muta\nconst ordenado = a.toSorted((x, y) =&gt; x - y); // [1, 2, 3]; a sigue [3,1,2]\n\n// toReversed() \u2192 como reverse() pero NO muta\nconst invertido = a.toReversed(); // [2,1,3]; a sigue [3,1,2]\n\n// toSpliced(idx, del, ...ins) \u2192 como splice() pero NO muta\nconst sinPrimero = a.toSpliced(0, 1);      // [1,2]\nconst conInsercion = a.toSpliced(1, 0, 9); // [3,9,1,2]\n\n// with(index, value) \u2192 copia cambiando un solo \u00edndice (no muta)\nconst b = [0, 1, 2];\nconst b2 = b.with(1, 99); // [0, 99, 2]; b sigue [0,1,2]\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#acceso-comodo","title":"Acceso c\u00f3modo","text":"<pre><code>const letras = [\"a\", \"b\", \"c\", \"d\"];\n\n// at(i) \u2192 acepta \u00edndices negativos\nletras.at(-1); // \"d\"\nletras.at(-2); // \"c\"\n</code></pre> <p>\u00bfPor qu\u00e9 preferir m\u00e9todos no mutables?</p> <p>Al no modificar el array original, evitas efectos colaterales y facilitas el razonamiento y el depurado del c\u00f3digo, especialmente en UIs reactivas.</p>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#metodos-que-si-mutan-el-array-usalos-con-cuidado","title":"\ud83d\udccc M\u00e9todos que s\u00ed mutan el array (\u00fasalos con cuidado)","text":"<p>Estos cambian el contenido del array original.</p>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#insercioneliminacion-flexible","title":"Inserci\u00f3n/eliminaci\u00f3n flexible","text":"<pre><code>const frutas = [\"manzana\", \"pera\", \"pl\u00e1tano\"];\n\n// splice(idx, deleteCount, ...items) \u2192 elimina/insertar/reemplaza en el sitio (muta)\nfrutas.splice(1, 1);                // elimina \"pera\" \u2192 [\"manzana\",\"pl\u00e1tano\"]\nfrutas.splice(1, 0, \"kiwi\");        // inserta en 1 \u2192 [\"manzana\",\"kiwi\",\"pl\u00e1tano\"]\nfrutas.splice(2, 1, \"uva\");         // reemplaza en 2 \u2192 [\"manzana\",\"kiwi\",\"uva\"]\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#ordenacion-y-reverso-en-sitio","title":"Ordenaci\u00f3n y reverso en sitio","text":"<pre><code>const nums = [10, 2, 30, 1];\n\n// sort(cmp?) \u2192 ordena como strings si no pasas comparador (muta)\nnums.sort((a, b) =&gt; a - b); // [1,2,10,30]\n\n// reverse() \u2192 invierte en sitio (muta)\nnums.reverse(); // [30,10,2,1]\n</code></pre> <p>Cuidado con <code>sort()</code> por defecto</p> <p>Sin comparador, <code>sort()</code> convierte a texto y puede ordenar n\u00fameros de forma inesperada (p. ej., <code>10</code> antes que <code>2</code>). Usa siempre <code>(a,b) =&gt; a - b</code> para orden num\u00e9rico.</p>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#relleno-y-copia-en-bloque","title":"Relleno y copia en bloque","text":"<pre><code>const arr = [1, 2, 3, 4];\n\n// fill(valor, inicio=0, fin=arr.length) \u2192 rellena en sitio\narr.fill(0, 1, 3);         // [1,0,0,4]\n\n// copyWithin(dest, inicio, finExcl) \u2192 copia un segmento dentro del propio array\nconst z = [10, 20, 30, 40];\nz.copyWithin(1, 2);        // copia [30,40] sobre idx\u22651 \u2192 [10,30,40,40]\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#aplanado-y-mapeo","title":"\ud83d\udccc Aplanado y mapeo","text":"<pre><code>// flat(profundidad=1) \u2192 aplana arrays anidados\n[1, [2, 3], [4, [5, 6]]].flat();   // [1, 2, 3, 4, [5, 6]]\n[1, [2, 3], [4, [5, 6]]].flat(2);  // [1, 2, 3, 4, 5, 6]\n\n// flatMap(fn) \u2192 mapea y aplana un nivel\n[1, 2, 3].flatMap(n =&gt; [n, n * 2]); // [1,2, 2,4, 3,6]\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#creacion-y-verificacion-de-arrays","title":"\ud83d\udccc Creaci\u00f3n y verificaci\u00f3n de arrays","text":"<pre><code>// Array.isArray(valor) \u2192 comprueba si es un array\nArray.isArray([1, 2, 3]); // true\n\n// Array.of(...valores) \u2192 crea array con los argumentos\nArray.of(3);        // [3]\nArray.of(1, 2, 3);  // [1,2,3]\n\n// Array.from(iterable, mapFn?) \u2192 crea desde iterable o array-like, con mapeo opcional\nArray.from(\"hola\");                 // [\"h\",\"o\",\"l\",\"a\"]\nArray.from({ length: 4 }, (_, i) =&gt; i * 2); // [0,2,4,6]\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#patrones-utiles-inmutables","title":"\ud83d\udccc Patrones \u00fatiles (inmutables)","text":""},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#insertar-reemplazar-y-eliminar-sin-mutar","title":"Insertar, reemplazar y eliminar sin mutar","text":"<pre><code>const arr = [10, 20, 30, 40];\n\n// Insertar 99 en la posici\u00f3n 2 (sin mutar)\nconst insertado = arr.toSpliced(2, 0, 99); // [10,20,99,30,40]\n\n// Reemplazar el valor en la posici\u00f3n 1 por 77 (sin mutar)\nconst reemplazado = arr.with(1, 77);       // [10,77,30,40]\n\n// Eliminar el elemento en la posici\u00f3n 0 (sin mutar)\nconst sinPrimero = arr.toSpliced(0, 1);    // [20,30,40]\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#ordenar-sin-mutar","title":"Ordenar sin mutar","text":"<pre><code>const datos = [3, 1, 2];\n\n// Orden ascendente sin tocar el original\nconst asc = datos.toSorted((a, b) =&gt; a - b); // [1,2,3]\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#clonar-de-forma-segura-superficial","title":"Clonar de forma segura (superficial)","text":"<pre><code>const original = [{ id: 1 }, { id: 2 }];\n\n// Copia superficial con spread\nconst copia = [...original];        // los objetos internos se comparten\n</code></pre> <p>Copia superficial vs profunda</p> <p><code>[...]</code>, <code>slice()</code> o <code>Array.from()</code> hacen copias superficiales: si el array contiene objetos, estos se siguen compartiendo. Para una copia profunda, necesitas una estrategia espec\u00edfica (por ejemplo, estructurada con <code>structuredClone</code> en entornos que lo soportan).</p>"},{"location":"03-funciones-arrays-objetos/03-02-04-arrays-avanzada/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 ventajas ofrecen <code>toSorted</code> y <code>toReversed</code> frente a <code>sort</code> y <code>reverse</code>?</li> <li>\u00bfQu\u00e9 diferencia pr\u00e1ctica hay entre <code>splice</code> y <code>toSpliced</code>?</li> <li>\u00bfPara qu\u00e9 sirve <code>with(index, value)</code> y por qu\u00e9 no muta el array original?</li> <li>\u00bfC\u00f3mo aplanar\u00edas <code>const x = [1,[2,3],[4,[5]]]</code> para obtener <code>[1,2,3,4,5]</code>?</li> <li>\u00bfQu\u00e9 m\u00e9todo usar\u00edas para crear un array de longitud 5 con los valores <code>[0,2,4,6,8]</code>?</li> </ol>"},{"location":"03-funciones-arrays-objetos/03-03-01-clases-1/","title":"3.3.1 Clases y objetos (I): fundamentos","text":"<p>En JavaScript moderno (ES6+), las clases proporcionan una sintaxis m\u00e1s clara y cercana a otros lenguajes orientados a objetos. En realidad, siguen bas\u00e1ndose en prototipos, pero la sintaxis <code>class</code> nos permite crear y gestionar objetos de manera m\u00e1s sencilla y estructurada.</p>"},{"location":"03-funciones-arrays-objetos/03-03-01-clases-1/#creacion-de-clases-y-objetos","title":"\ud83d\udccc Creaci\u00f3n de clases y objetos","text":"<pre><code>// Definici\u00f3n de una clase b\u00e1sica\nclass Persona {\n  // El constructor se ejecuta al crear un objeto con \"new\"\n  constructor(nombre, edad) {\n    this._nombre = nombre; //Se suele utilizar el gui\u00f3n bajo para indicar que una propiedad es privada\n    this._edad = edad;\n  }\n}\n\n// Crear un objeto de la clase Persona\nconst persona1 = new Persona(\"Laura\", 25);\nconsole.log(persona1.nombre); // \"Laura\"\nconsole.log(persona1.edad);   // 25\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-03-01-clases-1/#propiedades-y-metodos","title":"\ud83d\udccc Propiedades y m\u00e9todos","text":"<p>Las clases pueden tener propiedades (variables dentro de los objetos) y m\u00e9todos (funciones asociadas a los objetos).</p> <pre><code>class Coche {\n  constructor(marca, modelo) {\n    this._marca = marca;\n    this._modelo = modelo;\n  }\n\n  // M\u00e9todo\n  arrancar() {\n    console.log(`${this._marca} ${this._modelo} est\u00e1 arrancando...`);\n  }\n}\n\nconst coche1 = new Coche(\"Toyota\", \"Corolla\");\ncoche1.arrancar(); // \"Toyota Corolla est\u00e1 arrancando...\"\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-03-01-clases-1/#el-metodo-constructor","title":"\ud83d\udccc El m\u00e9todo constructor","text":"<p>El constructor es un m\u00e9todo especial que se ejecuta autom\u00e1ticamente al crear un nuevo objeto con <code>new</code>. Se utiliza para inicializar propiedades.</p> <pre><code>class Libro {\n  constructor(titulo, autor, paginas) {\n    this.titulo = titulo;\n    this.autor = autor;\n    this.paginas = paginas;\n  }\n\n  descripcion() {\n    return `${this.titulo}, escrito por ${this.autor}, tiene ${this.paginas} p\u00e1ginas.`;\n  }\n}\n\nconst libro1 = new Libro(\"1984\", \"George Orwell\", 328);\nconsole.log(libro1.descripcion());\n// \"1984, escrito por George Orwell, tiene 328 p\u00e1ginas.\"\n</code></pre> <p>Recuerda</p> <ul> <li>Una clase puede tener solo un <code>constructor</code>.</li> <li>Si no defines un constructor, JavaScript genera uno por defecto sin par\u00e1metros.</li> </ul>"},{"location":"03-funciones-arrays-objetos/03-03-01-clases-1/#getters-y-setters","title":"\ud83d\udccc Getters y Setters","text":"<p>Los getters y setters permiten controlar c\u00f3mo se accede y modifica una propiedad de un objeto. Con ellos podemos encapsular la l\u00f3gica de lectura y escritura sin exponer directamente las propiedades internas.</p> <pre><code>class Rectangulo {\n  constructor(ancho, alto) {\n    this._ancho = ancho;  // Convenci\u00f3n: \"_\" para propiedades \"privadas\"\n    this._alto = alto;\n  }\n\n  // Getter: devuelve el \u00e1rea\n  get area() {\n    return this._ancho * this._alto;\n  }\n\n  // Setter: valida antes de cambiar el ancho\n  set ancho(valor) {\n    if (valor &gt; 0) {\n      this._ancho = valor;\n    } else {\n      console.log(\"El ancho debe ser mayor que 0\");\n    }\n  }\n}\n\nconst rect = new Rectangulo(10, 5);\nconsole.log(rect.area); // 50\n\nrect.ancho = 20; // Cambia el ancho\nconsole.log(rect.area); // 100\n\nrect.ancho = -5; // Muestra advertencia, no cambia el valor\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-03-01-clases-1/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfPara qu\u00e9 sirven los getters y setters en una clase?</li> <li>\u00bfQu\u00e9 convenci\u00f3n se suele usar para nombrar propiedades internas que no deben modificarse directamente?</li> <li>Escribe un ejemplo de clase <code>CuentaBancaria</code> que tenga un setter que no permita saldo negativo.</li> </ol>"},{"location":"03-funciones-arrays-objetos/03-03-02-clases-2/","title":"3.3.2 Clases y objetos (II): herencia y encapsulaci\u00f3n","text":"<p>En la programaci\u00f3n orientada a objetos, herencia y encapsulaci\u00f3n son dos conceptos clave que permiten crear c\u00f3digo m\u00e1s organizado, reutilizable y seguro. En JavaScript se implementan a trav\u00e9s de las clases, sus constructores y los modificadores de acceso.</p>"},{"location":"03-funciones-arrays-objetos/03-03-02-clases-2/#herencia","title":"\ud83d\udccc Herencia","text":"<p>La herencia permite que una clase (subclase) extienda otra clase (superclase), heredando sus propiedades y m\u00e9todos. Esto evita repetir c\u00f3digo y facilita la especializaci\u00f3n de clases.</p>"},{"location":"03-funciones-arrays-objetos/03-03-02-clases-2/#sintaxis-basica-con-extends","title":"Sintaxis b\u00e1sica con <code>extends</code>","text":"<pre><code>// Clase base\nclass Animal {\n  constructor(nombre) {\n    this.nombre = nombre;\n  }\n\n  hablar() {\n    console.log(`${this.nombre} hace un sonido.`);\n  }\n}\n\n// Subclase que hereda de Animal\nclass Perro extends Animal {\n  hablar() {\n    console.log(`${this.nombre} ladra: \u00a1guau guau!`);\n  }\n}\n\nconst perro = new Perro(\"Toby\");\nperro.hablar(); // Toby ladra: \u00a1guau guau!\n</code></pre> <p>En este ejemplo, <code>Perro</code> hereda de <code>Animal</code> y sobrescribe (<code>override</code>) el m\u00e9todo <code>hablar</code>.</p>"},{"location":"03-funciones-arrays-objetos/03-03-02-clases-2/#uso-de-super","title":"Uso de <code>super</code>","text":"<p>La palabra clave <code>super</code> permite llamar al constructor o m\u00e9todos de la clase padre.</p> <pre><code>class Gato extends Animal {\n  constructor(nombre, color) {\n    super(nombre); // Llama al constructor de Animal\n    this.color = color;\n  }\n\n  hablar() {\n    super.hablar(); // Llama al m\u00e9todo de la superclase\n    console.log(`${this.nombre} ma\u00falla: \u00a1miau!`);\n  }\n}\n\nconst gato = new Gato(\"Michi\", \"negro\");\ngato.hablar();\n// Michi hace un sonido.\n// Michi ma\u00falla: \u00a1miau!\n</code></pre>"},{"location":"03-funciones-arrays-objetos/03-03-02-clases-2/#encapsulacion","title":"\ud83d\udccc Encapsulaci\u00f3n","text":"<p>La encapsulaci\u00f3n significa proteger el acceso a los datos internos de un objeto, para que solo se manipulen a trav\u00e9s de m\u00e9todos seguros.</p> <p>En JavaScript moderno se usa el prefijo <code>#</code> para declarar propiedades privadas dentro de una clase.</p> <pre><code>class CuentaBancaria {\n  #saldo; // Propiedad privada\n\n  constructor(saldoInicial) {\n    this.#saldo = saldoInicial;\n  }\n\n  // M\u00e9todo p\u00fablico para consultar\n  verSaldo() {\n    return this.#saldo;\n  }\n\n  // M\u00e9todo p\u00fablico para modificar con seguridad\n  depositar(cantidad) {\n    if (cantidad &gt; 0) {\n      this.#saldo += cantidad;\n    }\n  }\n\n  retirar(cantidad) {\n    if (cantidad &gt; 0 &amp;&amp; cantidad &lt;= this.#saldo) {\n      this.#saldo -= cantidad;\n    } else {\n      console.log(\"Fondos insuficientes o cantidad inv\u00e1lida.\");\n    }\n  }\n}\n\nconst cuenta = new CuentaBancaria(100);\nconsole.log(cuenta.verSaldo()); // 100\ncuenta.depositar(50);\nconsole.log(cuenta.verSaldo()); // 150\ncuenta.retirar(200); // Fondos insuficientes\n</code></pre> <p>Propiedades privadas modernas</p> <p>Antes de la introducci\u00f3n del prefijo <code>#</code> (ES2022), se usaban convenciones como <code>_saldo</code> para indicar que una propiedad deb\u00eda tratarse como privada, pero no hab\u00eda protecci\u00f3n real. Hoy en d\u00eda, <code>#</code> garantiza que la propiedad no pueda accederse desde fuera de la clase.</p>"},{"location":"03-funciones-arrays-objetos/03-03-02-clases-2/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 palabra clave se utiliza para extender una clase en JavaScript?</li> <li>\u00bfQu\u00e9 funci\u00f3n tiene <code>super</code> dentro de una subclase?</li> <li>\u00bfQu\u00e9 diferencia hay entre usar <code>_propiedad</code> y <code>#propiedad</code> en una clase?</li> <li>Escribe una clase <code>Empleado</code> que herede de <code>Persona</code> y a\u00f1ada la propiedad <code>salario</code>.</li> <li>\u00bfC\u00f3mo se consigue proteger los datos internos de una clase en JavaScript?</li> </ol>"},{"location":"04-eventos-formularios-almacenamiento/04-01-eventos/","title":"4.1 Eventos en JavaScript","text":"<p>Los eventos permiten que una p\u00e1gina web responda a las acciones del usuario o del navegador: un clic, mover el rat\u00f3n, escribir en el teclado, enviar un formulario, etc. Gracias a ellos, JavaScript convierte una web est\u00e1tica en una experiencia interactiva.</p>"},{"location":"04-eventos-formularios-almacenamiento/04-01-eventos/#definicion-y-uso-de-eventos","title":"\ud83d\udccc Definici\u00f3n y uso de eventos","text":"<p>Un evento es un suceso detectado por el navegador. Ejemplos comunes:</p> <ul> <li><code>click</code>: cuando el usuario hace clic.</li> <li><code>mouseover</code>: cuando el rat\u00f3n entra en un elemento.</li> <li><code>mouseout</code>: cuando el rat\u00f3n sale de un elemento.</li> <li><code>keydown</code>: al pulsar una tecla.</li> <li><code>submit</code>: al enviar un formulario.</li> </ul>"},{"location":"04-eventos-formularios-almacenamiento/04-01-eventos/#event-listeners-escuchar-y-eliminar-eventos","title":"\ud83d\udccc Event listeners: escuchar y eliminar eventos","text":"<p>La manera m\u00e1s flexible de escuchar eventos es con <code>addEventListener</code>.</p> <pre><code>elemento.addEventListener(\"tipoEvento\", funcion);\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-01-eventos/#funcion-anonima-tradicional","title":"Funci\u00f3n an\u00f3nima tradicional","text":"<pre><code>const boton = document.getElementById(\"btn\");\n\nboton.addEventListener(\"click\", function (e) {\n  console.log(\"Se puls\u00f3 el bot\u00f3n\");\n  console.log(`Tipo: ${e.type}, Elemento: ${e.target.id}`);\n});\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-01-eventos/#funcion-flecha-anonima","title":"Funci\u00f3n flecha an\u00f3nima","text":"<pre><code>const caja = document.getElementById(\"caja\");\n\ncaja.addEventListener(\"mouseover\", (e) =&gt; {\n  e.target.style.backgroundColor = \"lightblue\";\n  console.log(\"El rat\u00f3n entr\u00f3 en la caja\");\n});\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-01-eventos/#funcion-con-nombre","title":"Funci\u00f3n con nombre","text":"<p>Las funciones con nombre permiten reutilizar o eliminar el listener.</p> <pre><code>function mostrarAlerta(e) {\n  alert(\"Has hecho clic en el p\u00e1rrafo\");\n}\n\nconst parrafo = document.getElementById(\"texto\");\nparrafo.addEventListener(\"click\", mostrarAlerta);\n\n// Para eliminarlo\nparrafo.removeEventListener(\"click\", mostrarAlerta);\n</code></pre> <p>\u00bfCu\u00e1l elegir?</p> <ul> <li>Usa funciones an\u00f3nimas para c\u00f3digo r\u00e1pido y sencillo.</li> <li>Usa funciones con nombre si quieres reutilizarlas o eliminarlas con <code>removeEventListener</code>.</li> </ul>"},{"location":"04-eventos-formularios-almacenamiento/04-01-eventos/#reutilizar-la-misma-funcion-en-varios-elementos","title":"\ud83d\udccc Reutilizar la misma funci\u00f3n en varios elementos","text":"<p>Un mismo manejador puede usarse en distintos elementos. Con la propiedad <code>event.target</code> distinguimos cu\u00e1l dispar\u00f3 el evento.</p> <pre><code>function resaltar(e) {\n  e.target.style.color = \"red\";\n  console.log(`Clic en: ${e.target.tagName}`);\n}\n\ndocument.getElementById(\"opcion1\").addEventListener(\"click\", resaltar);\ndocument.getElementById(\"opcion2\").addEventListener(\"click\", resaltar);\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-01-eventos/#manipulacion-del-objeto-event","title":"\ud83d\udccc Manipulaci\u00f3n del objeto <code>event</code>","text":"<p>El par\u00e1metro <code>event</code> (o <code>e</code>) contiene informaci\u00f3n sobre el suceso.</p> <ul> <li><code>event.type</code>: tipo de evento (<code>click</code>, <code>mouseover</code>, etc.).</li> <li><code>event.target</code>: elemento que origin\u00f3 el evento.</li> <li><code>event.preventDefault()</code>: evita el comportamiento por defecto del navegador.</li> </ul>"},{"location":"04-eventos-formularios-almacenamiento/04-01-eventos/#ejemplo-con-preventdefault","title":"Ejemplo con <code>preventDefault</code>","text":"<pre><code>const enlace = document.getElementById(\"miEnlace\");\n\nenlace.addEventListener(\"click\", function (e) {\n  e.preventDefault(); // Bloquea la acci\u00f3n por defecto\n  alert(\"El enlace no se abrir\u00e1, hemos usado preventDefault()\");\n});\n</code></pre> <p>Cu\u00e1ndo usar preventDefault</p> <p>Empl\u00e9alo solo cuando quieras modificar el comportamiento normal del navegador, por ejemplo: - Evitar que un enlace abra otra p\u00e1gina. - Impedir que un formulario se env\u00ede autom\u00e1ticamente.</p>"},{"location":"04-eventos-formularios-almacenamiento/04-01-eventos/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 diferencia hay entre usar una funci\u00f3n an\u00f3nima y una funci\u00f3n con nombre en un evento?</li> <li>\u00bfQu\u00e9 devuelve <code>event.target</code> dentro de un manejador?</li> <li>\u00bfQu\u00e9 sucede si llamas a <code>preventDefault()</code> en el evento <code>submit</code> de un formulario?</li> <li>\u00bfC\u00f3mo eliminar\u00edas un listener previamente a\u00f1adido a un elemento?</li> <li>\u00bfQu\u00e9 ventaja tiene reutilizar la misma funci\u00f3n en varios elementos?</li> </ol>"},{"location":"04-eventos-formularios-almacenamiento/04-02-01-validacion-html5/","title":"4.2.1 Validaci\u00f3n con HTML5","text":"<p>HTML5 incorpora una serie de atributos que permiten validar formularios sin necesidad de escribir JavaScript. Estos atributos aseguran que los datos introducidos cumplen unos requisitos m\u00ednimos antes de enviar el formulario.</p> <p>La validaci\u00f3n con HTML5 es r\u00e1pida y sencilla, pero se puede complementar con JavaScript para personalizar los mensajes y el comportamiento.</p>"},{"location":"04-eventos-formularios-almacenamiento/04-02-01-validacion-html5/#atributos-de-validacion-mas-comunes","title":"\ud83d\udccc Atributos de validaci\u00f3n m\u00e1s comunes","text":""},{"location":"04-eventos-formularios-almacenamiento/04-02-01-validacion-html5/#required","title":"required","text":"<p>Obliga a que el campo no est\u00e9 vac\u00edo.</p> <pre><code>&lt;input type=\"text\" required placeholder=\"Nombre\"&gt;\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-02-01-validacion-html5/#type","title":"type","text":"<p>Define el tipo de dato esperado (<code>email</code>, <code>number</code>, <code>url</code>, <code>date</code>, etc.). El navegador comprobar\u00e1 autom\u00e1ticamente que el formato sea correcto.</p> <pre><code>&lt;input type=\"email\" required placeholder=\"Correo electr\u00f3nico\"&gt;\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-02-01-validacion-html5/#min-y-max","title":"min y max","text":"<p>Restringen un rango de valores (para <code>number</code>, <code>date</code>, etc.).</p> <pre><code>&lt;input type=\"number\" min=\"18\" max=\"99\" required&gt;\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-02-01-validacion-html5/#minlength-y-maxlength","title":"minlength y maxlength","text":"<p>Definen la longitud m\u00ednima y m\u00e1xima de texto.</p> <pre><code>&lt;input type=\"password\" minlength=\"6\" maxlength=\"12\" required&gt;\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-02-01-validacion-html5/#pattern","title":"pattern","text":"<p>Permite usar una expresi\u00f3n regular para validar el contenido.</p> <pre><code>&lt;input type=\"text\" pattern=\"[A-Za-z]+\" title=\"Solo letras permitidas\"&gt;\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-02-01-validacion-html5/#api-de-validacion-de-formularios","title":"\ud83d\udccc API de validaci\u00f3n de formularios","text":"<p>Adem\u00e1s de los atributos, HTML5 incluye m\u00e9todos que permiten interactuar con el formulario desde JavaScript:</p>"},{"location":"04-eventos-formularios-almacenamiento/04-02-01-validacion-html5/#checkvalidity","title":"checkValidity()","text":"<p>Devuelve <code>true</code> si todos los campos cumplen las reglas de validaci\u00f3n.</p> <pre><code>&lt;form id=\"miFormulario\"&gt;\n  &lt;input type=\"email\" required&gt;\n  &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\n  const form = document.getElementById(\"miFormulario\");\n  console.log(form.checkValidity()); // true o false\n&lt;/script&gt;\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-02-01-validacion-html5/#reportvalidity","title":"reportValidity()","text":"<p>Muestra los mensajes de error nativos del navegador si hay campos inv\u00e1lidos.</p> <pre><code>form.reportValidity(); // Muestra un mensaje si alg\u00fan campo es incorrecto\n</code></pre> <p>Mensajes del navegador</p> <p>Los navegadores modernos muestran mensajes autom\u00e1ticos en el idioma configurado del sistema (por ejemplo, \u201cRellene este campo\u201d). Estos mensajes no siempre se pueden personalizar con HTML5, por eso a menudo se complementan con JavaScript.</p>"},{"location":"04-eventos-formularios-almacenamiento/04-02-01-validacion-html5/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 atributo utilizar\u00edas para que un campo de texto sea obligatorio?</li> <li>\u00bfC\u00f3mo puedes limitar un campo <code>number</code> para que solo acepte valores entre 1 y 10?</li> <li>\u00bfQu\u00e9 diferencia hay entre <code>checkValidity()</code> y <code>reportValidity()</code>?</li> <li>\u00bfC\u00f3mo podr\u00edas validar que un campo solo acepte letras usando HTML5?</li> </ol>"},{"location":"04-eventos-formularios-almacenamiento/04-02-02-validacion-javascript/","title":"4.2.2 Validaci\u00f3n personalizada con JavaScript","text":"<p>Aunque HTML5 permite validar formularios de forma b\u00e1sica con sus atributos, en muchos casos se necesita m\u00e1s control: mostrar mensajes propios, validar condiciones espec\u00edficas o aplicar estilos personalizados a los campos.</p> <p>Para esto utilizamos JavaScript moderno junto con la API de validaci\u00f3n.</p>"},{"location":"04-eventos-formularios-almacenamiento/04-02-02-validacion-javascript/#interceptar-el-envio-del-formulario","title":"\ud83d\udccc Interceptar el env\u00edo del formulario","text":"<p>Podemos usar el evento <code>submit</code> para detener el env\u00edo si los datos no son correctos.</p> <pre><code>&lt;form id=\"registro\"&gt;\n  &lt;input type=\"text\" id=\"usuario\" required placeholder=\"Nombre de usuario\"&gt;\n  &lt;input type=\"password\" id=\"clave\" required minlength=\"6\" placeholder=\"Contrase\u00f1a\"&gt;\n  &lt;button type=\"submit\"&gt;Registrar&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\n  const form = document.getElementById(\"registro\");\n\n  form.addEventListener(\"submit\", (e) =&gt; {\n    if (!form.checkValidity()) {\n      e.preventDefault(); // Bloquea el env\u00edo si hay errores\n      alert(\"Por favor, revisa los campos antes de enviar.\");\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-02-02-validacion-javascript/#mensajes-personalizados-con-setcustomvalidity","title":"\ud83d\udccc Mensajes personalizados con setCustomValidity()","text":"<p>Podemos reemplazar los mensajes gen\u00e9ricos del navegador.</p> <pre><code>&lt;input type=\"password\" id=\"clave\" required minlength=\"6\" placeholder=\"Contrase\u00f1a\"&gt;\n\n&lt;script&gt;\n  const clave = document.getElementById(\"clave\");\n\n  clave.addEventListener(\"input\", () =&gt; {\n    if (clave.value.length &lt; 6) {\n      clave.setCustomValidity(\"La contrase\u00f1a debe tener al menos 6 caracteres\");\n    } else {\n      clave.setCustomValidity(\"\"); // Limpia el error\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-02-02-validacion-javascript/#ejemplo-confirmar-contrasenas","title":"\ud83d\udccc Ejemplo: Confirmar contrase\u00f1as","text":"<p>Un caso muy com\u00fan es validar que dos contrase\u00f1as coinciden.</p> <pre><code>&lt;form id=\"registro\"&gt;\n  &lt;input type=\"password\" id=\"clave1\" placeholder=\"Contrase\u00f1a\" required&gt;\n  &lt;input type=\"password\" id=\"clave2\" placeholder=\"Repite la contrase\u00f1a\" required&gt;\n  &lt;button type=\"submit\"&gt;Registrar&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\n  const clave1 = document.getElementById(\"clave1\");\n  const clave2 = document.getElementById(\"clave2\");\n\n  clave2.addEventListener(\"input\", () =&gt; {\n    if (clave1.value !== clave2.value) {\n      clave2.setCustomValidity(\"Las contrase\u00f1as no coinciden\");\n    } else {\n      clave2.setCustomValidity(\"\");\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-02-02-validacion-javascript/#el-objeto-validity","title":"\ud83d\udccc El objeto validity","text":"<p>Cada campo de formulario tiene la propiedad <code>.validity</code>, que devuelve un objeto con banderas booleanas que indican por qu\u00e9 un campo no es v\u00e1lido.</p> <p>Las m\u00e1s comunes son:</p> <ul> <li><code>valueMissing</code>: el campo est\u00e1 vac\u00edo y es obligatorio.</li> <li><code>typeMismatch</code>: el valor no coincide con el tipo (<code>email</code>, <code>url</code>, etc.).</li> <li><code>tooShort</code> o <code>tooLong</code>: el valor no cumple con la longitud m\u00ednima o m\u00e1xima.</li> <li><code>patternMismatch</code>: el valor no coincide con el patr\u00f3n definido en <code>pattern</code>.</li> <li><code>valid</code>: es <code>true</code> si el campo cumple todas las condiciones.</li> </ul> <pre><code>&lt;input type=\"email\" id=\"correo\" required placeholder=\"Introduce tu email\"&gt;\n\n&lt;script&gt;\n  const correo = document.getElementById(\"correo\");\n\n  correo.addEventListener(\"input\", () =&gt; {\n    if (correo.validity.valueMissing) {\n      correo.setCustomValidity(\"El correo es obligatorio\");\n    } else if (correo.validity.typeMismatch) {\n      correo.setCustomValidity(\"Por favor, introduce un email v\u00e1lido\");\n    } else {\n      correo.setCustomValidity(\"\");\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-02-02-validacion-javascript/#ejemplo-con-pattern","title":"\ud83d\udccc Ejemplo con pattern","text":"<p>Con el atributo <code>pattern</code> podemos definir expresiones regulares para validar un formato espec\u00edfico. Por ejemplo, supongamos que queremos que el usuario solo contenga letras y n\u00fameros (sin espacios ni caracteres especiales).</p> <pre><code>&lt;form id=\"registro\"&gt;\n  &lt;input \n    type=\"text\" \n    id=\"usuario\" \n    pattern=\"[A-Za-z0-9]+\" \n    required \n    placeholder=\"Nombre de usuario (solo letras y n\u00fameros)\"&gt;\n  &lt;button type=\"submit\"&gt;Registrar&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\n  const usuario = document.getElementById(\"usuario\");\n\n  usuario.addEventListener(\"input\", () =&gt; {\n    if (usuario.validity.patternMismatch) {\n      usuario.setCustomValidity(\"El nombre solo puede contener letras y n\u00fameros, sin espacios\");\n    } else {\n      usuario.setCustomValidity(\"\");\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-02-02-validacion-javascript/#validar-en-cliente-y-en-servidor","title":"\ud83d\udccc Validar en cliente y en servidor","text":"<p>No basta con validar en el cliente</p> <p>La validaci\u00f3n con JavaScript es \u00fatil para mejorar la experiencia del usuario: evita env\u00edos innecesarios, muestra mensajes inmediatos y gu\u00eda al usuario a rellenar bien los campos. Sin embargo, no es suficiente. Un usuario avanzado puede desactivar JavaScript o manipular los datos antes de enviarlos.</p> <p>Por eso, siempre se recomienda:</p> <ol> <li>Validaci\u00f3n en el cliente \u2192 r\u00e1pida, amigable y visual.</li> <li>Validaci\u00f3n en el servidor \u2192 obligatoria, garantiza que los datos que llegan cumplen con las reglas de seguridad y formato.</li> </ol>"},{"location":"04-eventos-formularios-almacenamiento/04-02-02-validacion-javascript/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 evento se utiliza para detener el env\u00edo de un formulario?</li> <li>\u00bfQu\u00e9 m\u00e9todo sirve para mostrar un mensaje de error personalizado en un campo?</li> <li>\u00bfC\u00f3mo puedes comprobar con JavaScript si un email tiene un formato v\u00e1lido?</li> <li>\u00bfQu\u00e9 atributo HTML5 se usa para validar un formato con expresiones regulares?</li> <li>\u00bfPor qu\u00e9 es necesario validar tambi\u00e9n en el servidor?</li> </ol>"},{"location":"04-eventos-formularios-almacenamiento/04-02-03-validacion-avanzada/","title":"4.2.3 Validaci\u00f3n en tiempo real con JavaScript","text":"<p>Una buena pr\u00e1ctica en los formularios modernos es mostrar feedback inmediato mientras el usuario escribe, sin esperar a que pulse el bot\u00f3n de enviar. Esto se logra con los eventos <code>input</code> (cuando el usuario modifica un campo) y <code>blur</code> (cuando abandona el campo).</p>"},{"location":"04-eventos-formularios-almacenamiento/04-02-03-validacion-avanzada/#validacion-con-el-evento-input","title":"\ud83d\udccc Validaci\u00f3n con el evento input","text":"<p>El evento <code>input</code> se dispara cada vez que cambia el valor de un campo. Podemos aprovecharlo para comprobar reglas y mostrar mensajes en el momento.</p> <pre><code>&lt;form id=\"form\"&gt;\n  &lt;label&gt;Email:&lt;/label&gt;\n  &lt;input type=\"email\" id=\"correo\" required&gt;\n  &lt;span id=\"error-correo\" style=\"color: red;\"&gt;&lt;/span&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\n  const correo = document.getElementById(\"correo\");\n  const errorCorreo = document.getElementById(\"error-correo\");\n\n  correo.addEventListener(\"input\", () =&gt; {\n    if (correo.validity.valueMissing) {\n      errorCorreo.textContent = \"El correo es obligatorio\";\n    } else if (correo.validity.typeMismatch) {\n      errorCorreo.textContent = \"Introduce un formato de correo v\u00e1lido\";\n    } else {\n      errorCorreo.textContent = \"\";\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-02-03-validacion-avanzada/#validacion-con-el-evento-blur","title":"\ud83d\udccc Validaci\u00f3n con el evento blur","text":"<p>El evento <code>blur</code> se activa cuando el usuario abandona un campo. Es \u00fatil para no molestar con mensajes mientras escribe, pero s\u00ed avisar si deja un error atr\u00e1s.</p> <pre><code>&lt;input type=\"text\" id=\"usuario\" required minlength=\"4\" placeholder=\"Usuario\"&gt;\n&lt;span id=\"error-usuario\" style=\"color: red;\"&gt;&lt;/span&gt;\n\n&lt;script&gt;\n  const usuario = document.getElementById(\"usuario\");\n  const errorUsuario = document.getElementById(\"error-usuario\");\n\n  usuario.addEventListener(\"blur\", () =&gt; {\n    if (usuario.validity.valueMissing) {\n      errorUsuario.textContent = \"El nombre de usuario es obligatorio\";\n    } else if (usuario.validity.tooShort) {\n      errorUsuario.textContent = \"Debe tener al menos 4 caracteres\";\n    } else {\n      errorUsuario.textContent = \"\";\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"04-eventos-formularios-almacenamiento/04-02-03-validacion-avanzada/#uso-de-clases-css-para-feedback-visual","title":"\ud83d\udccc Uso de clases CSS para feedback visual","text":"<p>Podemos a\u00f1adir clases a los campos seg\u00fan sean v\u00e1lidos o inv\u00e1lidos, para mejorar la experiencia visual.</p> <pre><code>input:valid {\n  border: 2px solid green;\n}\ninput:invalid {\n  border: 2px solid red;\n}\n</code></pre> <p>Con estas reglas de CSS, el propio navegador aplica estilos a los campos seg\u00fan su validez.</p> <p>\u00bfinput o blur?</p> <ul> <li>Usa <code>input</code> si quieres mostrar feedback en tiempo real mientras escribe.</li> <li>Usa <code>blur</code> si prefieres que el aviso aparezca solo cuando el usuario deja un campo incompleto o incorrecto.</li> <li>Lo m\u00e1s com\u00fan es combinarlos: feedback suave en tiempo real y un repaso final en el env\u00edo del formulario.</li> </ul>"},{"location":"04-eventos-formularios-almacenamiento/04-02-03-validacion-avanzada/#preguntas-de-repaso","title":"\ud83d\udcdd Preguntas de repaso","text":"<p>Reflexiona sobre lo aprendido</p> <ol> <li>\u00bfQu\u00e9 evento se utiliza para validar mientras el usuario escribe?</li> <li>\u00bfQu\u00e9 evento se dispara cuando el usuario abandona un campo de formulario?</li> <li>\u00bfC\u00f3mo aplicar\u00edas un estilo verde o rojo autom\u00e1ticamente a un campo v\u00e1lido o inv\u00e1lido?</li> <li>\u00bfQu\u00e9 diferencia hay entre mostrar errores con <code>input</code> y con <code>blur</code>?</li> <li>\u00bfQu\u00e9 propiedad de CSS puedes usar junto con HTML5 para resaltar la validez de los campos sin escribir JavaScript?</li> </ol>"}]}